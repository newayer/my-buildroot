	.arch armv7-a
	.eabi_attribute 20, 1
	.eabi_attribute 21, 1
	.eabi_attribute 23, 3
	.eabi_attribute 24, 1
	.eabi_attribute 25, 1
	.eabi_attribute 26, 2
	.eabi_attribute 30, 4
	.eabi_attribute 34, 1
	.eabi_attribute 18, 2
	.file	"mpi_dev.c"
	.text
	.syntax unified
	.syntax unified
	.section "__ksymtab_strings","aMS",%progbits,1	
__kstrtab_mpi_node_add_in_watcher:					
	.asciz 	"mpi_node_add_in_watcher"					
__kstrtabns_mpi_node_add_in_watcher:					
	.asciz 	""					
	.previous						

	.section "__ksymtab_strings","aMS",%progbits,1	
__kstrtab_mpi_node_add_in_filter:					
	.asciz 	"mpi_node_add_in_filter"					
__kstrtabns_mpi_node_add_in_filter:					
	.asciz 	""					
	.previous						

	.section "__ksymtab_strings","aMS",%progbits,1	
__kstrtab_mpi_node_add_out_watcher:					
	.asciz 	"mpi_node_add_out_watcher"					
__kstrtabns_mpi_node_add_out_watcher:					
	.asciz 	""					
	.previous						

	.section "__ksymtab_strings","aMS",%progbits,1	
__kstrtab_mpi_node_add_out_filter:					
	.asciz 	"mpi_node_add_out_filter"					
__kstrtabns_mpi_node_add_out_filter:					
	.asciz 	""					
	.previous						

	.section "__ksymtab_strings","aMS",%progbits,1	
__kstrtab_mpi_node_del_in_watcher:					
	.asciz 	"mpi_node_del_in_watcher"					
__kstrtabns_mpi_node_del_in_watcher:					
	.asciz 	""					
	.previous						

	.section "__ksymtab_strings","aMS",%progbits,1	
__kstrtab_mpi_node_del_in_filter:					
	.asciz 	"mpi_node_del_in_filter"					
__kstrtabns_mpi_node_del_in_filter:					
	.asciz 	""					
	.previous						

	.section "__ksymtab_strings","aMS",%progbits,1	
__kstrtab_mpi_node_del_out_watcher:					
	.asciz 	"mpi_node_del_out_watcher"					
__kstrtabns_mpi_node_del_out_watcher:					
	.asciz 	""					
	.previous						

	.section "__ksymtab_strings","aMS",%progbits,1	
__kstrtab_mpi_node_del_out_filter:					
	.asciz 	"mpi_node_del_out_filter"					
__kstrtabns_mpi_node_del_out_filter:					
	.asciz 	""					
	.previous						

	.section "__ksymtab_strings","aMS",%progbits,1	
__kstrtab_mpi_node_enable_auto_streamon:					
	.asciz 	"mpi_node_enable_auto_streamon"					
__kstrtabns_mpi_node_enable_auto_streamon:					
	.asciz 	""					
	.previous						

	.section "__ksymtab_strings","aMS",%progbits,1	
__kstrtab_mpi_node_pick_in_buffer:					
	.asciz 	"mpi_node_pick_in_buffer"					
__kstrtabns_mpi_node_pick_in_buffer:					
	.asciz 	""					
	.previous						

	.section "__ksymtab_strings","aMS",%progbits,1	
__kstrtab_mpi_node_pick_out_buffer:					
	.asciz 	"mpi_node_pick_out_buffer"					
__kstrtabns_mpi_node_pick_out_buffer:					
	.asciz 	""					
	.previous						

	.section "__ksymtab_strings","aMS",%progbits,1	
__kstrtab_mpi_node_release_buffer:					
	.asciz 	"mpi_node_release_buffer"					
__kstrtabns_mpi_node_release_buffer:					
	.asciz 	""					
	.previous						

	.section "__ksymtab_strings","aMS",%progbits,1	
__kstrtab_mpi_node_set_in_frame_rate:					
	.asciz 	"mpi_node_set_in_frame_rate"					
__kstrtabns_mpi_node_set_in_frame_rate:					
	.asciz 	""					
	.previous						

	.section "__ksymtab_strings","aMS",%progbits,1	
__kstrtab_mpi_node_set_out_frame_rate:					
	.asciz 	"mpi_node_set_out_frame_rate"					
__kstrtabns_mpi_node_set_out_frame_rate:					
	.asciz 	""					
	.previous						

	.section "__ksymtab_strings","aMS",%progbits,1	
__kstrtab_mpi_node_streamon:					
	.asciz 	"mpi_node_streamon"					
__kstrtabns_mpi_node_streamon:					
	.asciz 	""					
	.previous						

	.section "__ksymtab_strings","aMS",%progbits,1	
__kstrtab_mpi_node_streamoff:					
	.asciz 	"mpi_node_streamoff"					
__kstrtabns_mpi_node_streamoff:					
	.asciz 	""					
	.previous						

	.section "__ksymtab_strings","aMS",%progbits,1	
__kstrtab_mpi_node_stream_pause:					
	.asciz 	"mpi_node_stream_pause"					
__kstrtabns_mpi_node_stream_pause:					
	.asciz 	""					
	.previous						

	.section "__ksymtab_strings","aMS",%progbits,1	
__kstrtab_mpi_node_buffer_in:					
	.asciz 	"mpi_node_buffer_in"					
__kstrtabns_mpi_node_buffer_in:					
	.asciz 	""					
	.previous						

	.section "__ksymtab_strings","aMS",%progbits,1	
__kstrtab_mpi_node_buffer_out:					
	.asciz 	"mpi_node_buffer_out"					
__kstrtabns_mpi_node_buffer_out:					
	.asciz 	""					
	.previous						

	.section "__ksymtab_strings","aMS",%progbits,1	
__kstrtab_mpi_node_get_in_buffer:					
	.asciz 	"mpi_node_get_in_buffer"					
__kstrtabns_mpi_node_get_in_buffer:					
	.asciz 	""					
	.previous						

	.section "__ksymtab_strings","aMS",%progbits,1	
__kstrtab_mpi_node_get_out_buffer:					
	.asciz 	"mpi_node_get_out_buffer"					
__kstrtabns_mpi_node_get_out_buffer:					
	.asciz 	""					
	.previous						

	.section "__ksymtab_strings","aMS",%progbits,1	
__kstrtab_mpi_node_request_buf:					
	.asciz 	"mpi_node_request_buf"					
__kstrtabns_mpi_node_request_buf:					
	.asciz 	""					
	.previous						

	.section "__ksymtab_strings","aMS",%progbits,1	
__kstrtab_mpi_node_flush:					
	.asciz 	"mpi_node_flush"					
__kstrtabns_mpi_node_flush:					
	.asciz 	""					
	.previous						

	.section "__ksymtab_strings","aMS",%progbits,1	
__kstrtab_mpi_node_unbind:					
	.asciz 	"mpi_node_unbind"					
__kstrtabns_mpi_node_unbind:					
	.asciz 	""					
	.previous						

	.section "__ksymtab_strings","aMS",%progbits,1	
__kstrtab_mpi_node_bind:					
	.asciz 	"mpi_node_bind"					
__kstrtabns_mpi_node_bind:					
	.asciz 	""					
	.previous						

	.section "__ksymtab_strings","aMS",%progbits,1	
__kstrtab_mpi_node_set_params:					
	.asciz 	"mpi_node_set_params"					
__kstrtabns_mpi_node_set_params:					
	.asciz 	""					
	.previous						

	.section "__ksymtab_strings","aMS",%progbits,1	
__kstrtab_mpi_node_destroy:					
	.asciz 	"mpi_node_destroy"					
__kstrtabns_mpi_node_destroy:					
	.asciz 	""					
	.previous						

	.section "__ksymtab_strings","aMS",%progbits,1	
__kstrtab_mpi_dev_create_node_with_params:					
	.asciz 	"mpi_dev_create_node_with_params"					
__kstrtabns_mpi_dev_create_node_with_params:					
	.asciz 	""					
	.previous						

	.section "__ksymtab_strings","aMS",%progbits,1	
__kstrtab_mpi_dev_request_job:					
	.asciz 	"mpi_dev_request_job"					
__kstrtabns_mpi_dev_request_job:					
	.asciz 	""					
	.previous						

	.section "__ksymtab_strings","aMS",%progbits,1	
__kstrtab_mpi_dev_request_job_for_node:					
	.asciz 	"mpi_dev_request_job_for_node"					
__kstrtabns_mpi_dev_request_job_for_node:					
	.asciz 	""					
	.previous						

	.section "__ksymtab_strings","aMS",%progbits,1	
__kstrtab_mpi_dev_run_job:					
	.asciz 	"mpi_dev_run_job"					
__kstrtabns_mpi_dev_run_job:					
	.asciz 	""					
	.previous						

	.section "__ksymtab_strings","aMS",%progbits,1	
__kstrtab_mpi_dev_unregister:					
	.asciz 	"mpi_dev_unregister"					
__kstrtabns_mpi_dev_unregister:					
	.asciz 	""					
	.previous						

	.section "__ksymtab_strings","aMS",%progbits,1	
__kstrtab_mpi_dev_register:					
	.asciz 	"mpi_dev_register"					
__kstrtabns_mpi_dev_register:					
	.asciz 	""					
	.previous						

	.thumb
	.syntax unified
	.align	1
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	add_user_to_buf, %function
add_user_to_buf:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cbz	r1, .L1
	ldr	r3, [r0, #76]
	adds	r2, r3, #1
	bne	.L4
	movs	r3, #0
.L12:
	str	r3, [r0, #76]
	ldr	r3, [r0, #76]
	cmp	r3, #31
	ble	.L8
.L9:
	mvn	r3, #1
	str	r3, [r0, #76]
.L7:
	ldr	r3, [r0, #76]
	cmp	r3, #0
	itt	ge
	addge	r1, r1, r3, lsl #2
	strge	r0, [r1, #68]
.L1:
	bx	lr
.L8:
	add	r2, r1, r3, lsl #2
	ldr	r2, [r2, #68]
	cmp	r2, #0
	beq	.L7
	adds	r3, r3, #1
	b	.L12
.L4:
	cmp	r3, #31
	ble	.L7
	b	.L9
	.fnend
	.size	add_user_to_buf, .-add_user_to_buf
	.align	1
	.global	mpi_node_set_out_frame_rate
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpi_node_set_out_frame_rate, %function
mpi_node_set_out_frame_rate:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movs	r0, #0
	bx	lr
	.fnend
	.size	mpi_node_set_out_frame_rate, .-mpi_node_set_out_frame_rate
	.align	1
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpi_node_cleanup_in_buffer, %function
mpi_node_cleanup_in_buffer:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r3, r4, r5, lr}
	.save {r3, r4, r5, lr}
	mov	r4, r0
	cbnz	r1, .L15
	ldr	r3, [r0, #284]
	cbnz	r3, .L14
	ldr	r3, [r0, #288]
	cbnz	r3, .L14
.L15:
	.syntax unified
@ 29 "./arch/arm/include/asm/irqflags.h" 1
		mrs	r5, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
	.thumb
	.syntax unified
	ldr	r0, [r4, #308]
	cbz	r0, .L17
	bl	mpi_obj_unref
	movs	r3, #0
	str	r3, [r4, #308]
.L17:
	.syntax unified
@ 171 "./arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, r5	@ local_irq_restore
@ 0 "" 2
	.thumb
	.syntax unified
.L14:
	pop	{r3, r4, r5, pc}
	.fnend
	.size	mpi_node_cleanup_in_buffer, .-mpi_node_cleanup_in_buffer
	.align	1
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpi_node_cleanup_out_buffer, %function
mpi_node_cleanup_out_buffer:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r3, r4, r5, lr}
	.save {r3, r4, r5, lr}
	mov	r4, r0
	cbnz	r1, .L22
	ldr	r3, [r0, #296]
	cbnz	r3, .L21
	ldr	r3, [r0, #300]
	cbnz	r3, .L21
.L22:
	.syntax unified
@ 29 "./arch/arm/include/asm/irqflags.h" 1
		mrs	r5, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
	.thumb
	.syntax unified
	ldr	r0, [r4, #312]
	cbz	r0, .L24
	bl	mpi_obj_unref
	movs	r3, #0
	str	r3, [r4, #312]
.L24:
	.syntax unified
@ 171 "./arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, r5	@ local_irq_restore
@ 0 "" 2
	.thumb
	.syntax unified
.L21:
	pop	{r3, r4, r5, pc}
	.fnend
	.size	mpi_node_cleanup_out_buffer, .-mpi_node_cleanup_out_buffer
	.align	1
	.global	mpi_node_streamon
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpi_node_streamon, %function
mpi_node_streamon:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	.save {r4, r5, r6, lr}
	.pad #16
	mov	r4, r0
	ldr	r3, [r0, #12]
	ldr	r6, [r0, #44]
	tst	r3, #3072
	bne	.L35
	cbz	r0, .L30
	ldr	r3, [r0, #12]
	and	r3, r3, #6
	cmp	r3, #2
	beq	.L31
.L30:
.L35:
	mov	r5, #-1
	b	.L28
.L31:
	bl	mpi_obj_ref
	ldr	r5, [r4, #12]
	ands	r5, r5, #4096
	beq	.L32
.L34:
	movs	r5, #0
.L33:
	mov	r0, r4
	bl	mpi_obj_unref
.L28:
	mov	r0, r5
	add	sp, sp, #16
	@ sp needed
	pop	{r4, r5, r6, pc}
.L32:
	ldr	r3, [r4]
	movs	r1, #5
	ldr	r2, .L42
	mov	r0, r5
	str	r3, [sp, #8]
	ldr	r3, [r4, #44]
	ldr	r3, [r3, #44]
	str	r3, [sp, #4]
	mov	r3, #338
	str	r3, [sp]
	ldr	r3, .L42+4
	bl	vlog
	ldr	r3, [r6, #80]
	cmp	r3, #0
	beq	.L34
	mov	r2, r5
	movs	r1, #5
	mov	r0, r4
	blx	r3
	mov	r5, r0
	cmp	r0, #0
	bne	.L33
	ldr	r3, [r4, #12]
	orr	r3, r3, #4096
	str	r3, [r4, #12]
	b	.L33
.L43:
	.align	2
.L42:
	.word	.LC0
	.word	.LANCHOR0
	.fnend
	.size	mpi_node_streamon, .-mpi_node_streamon
	.align	1
	.global	mpi_node_stream_pause
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpi_node_stream_pause, %function
mpi_node_stream_pause:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}
	.save {r4, lr}
	mov	r4, r0
	cbz	r0, .L45
	ldr	r3, [r0, #12]
	and	r3, r3, #6
	cmp	r3, #2
	beq	.L46
.L45:
	mov	r0, #-1
.L44:
	pop	{r4, pc}
.L46:
.L48:
	bl	mpi_obj_ref
	ldr	r3, [r4, #12]
	mov	r0, r4
	lsls	r2, r3, #19
	itt	mi
	bicmi	r3, r3, #4096
	strmi	r3, [r4, #12]
	bl	mpi_obj_unref
	movs	r0, #0
	b	.L44
	.fnend
	.size	mpi_node_stream_pause, .-mpi_node_stream_pause
	.align	1
	.global	mpi_node_streamoff
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpi_node_streamoff, %function
mpi_node_streamoff:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, lr}
	.save {r4, r5, lr}
	mov	r4, r0
	.pad #20
	sub	sp, sp, #20
	ldr	r5, [r0, #44]
	cbz	r0, .L56
	ldr	r3, [r0, #12]
	and	r3, r3, #6
	cmp	r3, #2
	beq	.L57
.L56:
	mov	r0, #-1
.L55:
	add	sp, sp, #20
	@ sp needed
	pop	{r4, r5, pc}
.L57:
	bl	mpi_obj_ref
	ldr	r3, [r4, #12]
	lsls	r3, r3, #19
	bpl	.L59
	ldr	r3, [r4]
	movs	r1, #5
	ldr	r2, .L70
	movs	r0, #0
	str	r3, [sp, #8]
	ldr	r3, [r4, #44]
	ldr	r3, [r3, #44]
	str	r3, [sp, #4]
	movw	r3, #371
	str	r3, [sp]
	ldr	r3, .L70+4
	bl	vlog
	ldr	r3, [r4, #12]
	bic	r3, r3, #4096
	str	r3, [r4, #12]
	ldr	r3, [r5, #80]
	cbz	r3, .L60
	movs	r2, #0
	movs	r1, #6
	mov	r0, r4
	blx	r3
.L60:
	.syntax unified
@ 29 "./arch/arm/include/asm/irqflags.h" 1
		mrs	r5, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
	.thumb
	.syntax unified
	add	r0, r4, #316
	bl	complete_all
	add	r0, r4, #328
	bl	complete_all
	.syntax unified
@ 171 "./arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, r5	@ local_irq_restore
@ 0 "" 2
	.thumb
	.syntax unified
.L59:
	mov	r0, r4
	bl	mpi_obj_unref
	movs	r0, #0
	b	.L55
.L71:
	.align	2
.L70:
	.word	.LC1
	.word	.LANCHOR0+18
	.fnend
	.size	mpi_node_streamoff, .-mpi_node_streamoff
	.align	1
	.global	mpi_node_request_buf
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpi_node_request_buf, %function
mpi_node_request_buf:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, lr}
	.save {r4, r5, r6, lr}
	mov	r4, r0
	.pad #24
	sub	sp, sp, #24
	mov	r5, r1
	ldr	r6, [r0, #60]
	cbz	r0, .L73
	ldr	r3, [r0, #12]
	and	r3, r3, #6
	cmp	r3, #2
	beq	.L74
.L73:
	movs	r5, #0
.L72:
	mov	r0, r5
	add	sp, sp, #24
	@ sp needed
	pop	{r4, r5, r6, pc}
.L74:
	ldr	r3, [r0, #44]
	ldr	r1, [r0]
	ldr	r2, [r3, #44]
	cbz	r5, .L78
	ldr	r3, [r5]
.L76:
	strd	r1, r3, [sp, #8]
	movs	r0, #0
	str	r2, [sp, #4]
	movw	r3, #650
	ldr	r2, .L85
	movs	r1, #5
	str	r3, [sp]
	ldr	r3, .L85+4
	bl	vlog
	mov	r1, r5
	mov	r0, r6
	bl	mpi_buf_pool_request_buf
	mov	r5, r0
	cbz	r0, .L77
	ldr	r3, [r6]
	movs	r1, #5
	ldr	r2, .L85+8
	str	r3, [sp, #16]
	ldr	r3, [r0]
	movs	r0, #0
	str	r3, [sp, #12]
	ldr	r3, [r4]
	str	r3, [sp, #8]
	ldr	r3, [r4, #44]
	ldr	r3, [r3, #44]
	str	r3, [sp, #4]
	mov	r3, #656
	str	r3, [sp]
	ldr	r3, .L85+4
	bl	vlog
	ldr	r3, [r6, #64]
	str	r3, [r4, #72]
.L77:
	mov	r1, r5
	mov	r0, r4
	bl	add_user_to_buf
	b	.L72
.L78:
	mov	r3, #-1
	b	.L76
.L86:
	.align	2
.L85:
	.word	.LC2
	.word	.LANCHOR0+37
	.word	.LC3
	.fnend
	.size	mpi_node_request_buf, .-mpi_node_request_buf
	.align	1
	.global	mpi_node_flush
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpi_node_flush, %function
mpi_node_flush:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, lr}
	.save {r4, r5, r6, r7, lr}
	mov	r4, r0
	.pad #20
	sub	sp, sp, #20
	mov	r5, r1
	ldr	r7, [r0, #44]
	.syntax unified
@ 29 "./arch/arm/include/asm/irqflags.h" 1
		mrs	r2, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
	.thumb
	.syntax unified
	ldr	r3, [r0, #12]
	add	r6, r0, #272
	ands	r1, r3, #2048
	beq	.L88
	.syntax unified
@ 171 "./arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, r2	@ local_irq_restore
@ 0 "" 2
	.thumb
	.syntax unified
	mov	r0, r6
	bl	wait_for_completion
.L89:
	movs	r0, #0
	add	sp, sp, #20
	@ sp needed
	pop	{r4, r5, r6, r7, pc}
.L88:
	orr	r3, r3, #2048
	str	r1, [r0, #272]
	str	r3, [r0, #12]
	.syntax unified
@ 171 "./arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, r2	@ local_irq_restore
@ 0 "" 2
	.thumb
	.syntax unified
	ldr	r3, [r0, #12]
	lsls	r3, r3, #19
	bpl	.L90
	bl	mpi_node_streamoff
.L90:
	ldr	r3, [r4]
	movs	r1, #5
	ldr	r2, .L104
	movs	r0, #0
	str	r3, [sp, #8]
	ldr	r3, [r7, #44]
	str	r3, [sp, #4]
	movw	r3, #689
	str	r3, [sp]
	ldr	r3, .L104+4
	bl	vlog
	ldr	r0, [r4, #268]
	cbz	r0, .L91
	movs	r2, #0
	mov	r1, r5
	bl	mpi_queue_flush
.L91:
	ldr	r3, [r7, #80]
	cbz	r3, .L92
	cbz	r5, .L93
	movs	r2, #0
	movs	r1, #3
.L103:
	mov	r0, r4
	blx	r3
.L92:
	.syntax unified
@ 29 "./arch/arm/include/asm/irqflags.h" 1
		mrs	r5, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
	.thumb
	.syntax unified
	mov	r0, r6
	bl	complete_all
	ldr	r3, [r4, #12]
	bic	r3, r3, #2048
	str	r3, [r4, #12]
	.syntax unified
@ 171 "./arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, r5	@ local_irq_restore
@ 0 "" 2
	.thumb
	.syntax unified
	b	.L89
.L93:
	mov	r2, r5
	movs	r1, #2
	b	.L103
.L105:
	.align	2
.L104:
	.word	.LC4
	.word	.LANCHOR0+58
	.fnend
	.size	mpi_node_flush, .-mpi_node_flush
	.align	1
	.global	mpi_node_unbind
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpi_node_unbind, %function
mpi_node_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, lr}
	.save {r4, r5, lr}
	.pad #28
	sub	sp, sp, #28
	ldr	r3, [r1]
	mov	r4, r1
	ldr	r2, .L115
	mov	r5, r0
	str	r3, [sp, #16]
	ldr	r3, [r1, #44]
	movs	r1, #5
	ldr	r3, [r3, #44]
	str	r3, [sp, #12]
	ldr	r3, [r0]
	str	r3, [sp, #8]
	ldr	r3, [r0, #44]
	movs	r0, #0
	ldr	r3, [r3, #44]
	str	r3, [sp, #4]
	mov	r3, #740
	str	r3, [sp]
	ldr	r3, .L115+4
	bl	vlog
	movs	r1, #1
	mov	r0, r4
	bl	mpi_node_flush
	mov	r0, r4
	bl	mpi_node_streamoff
	ldr	r3, [r4, #12]
	lsls	r2, r3, #18
	bpl	.L106
	bic	r3, r3, #8192
	str	r3, [r4, #12]
	ldr	r3, [r4, #44]
	ldr	r3, [r3, #72]
	cbz	r3, .L109
	movs	r1, #0
	ldr	r0, [r4, #248]
	blx	r3
	str	r0, [r4, #248]
.L109:
	movs	r1, #1
	mov	r0, r4
	bl	mpi_node_cleanup_in_buffer
	movs	r1, #1
	mov	r0, r4
	bl	mpi_node_cleanup_out_buffer
	movs	r1, #1
	mov	r0, r5
	bl	mpi_node_cleanup_in_buffer
	movs	r1, #1
	mov	r0, r5
	bl	mpi_node_cleanup_out_buffer
	mov	r1, r4
	add	r0, r5, #260
	bl	mpi_list_del_obj_rcu
	cbnz	r0, .L110
	mov	r0, r4
	bl	mpi_obj_unref
.L110:
	mov	r1, r5
	add	r0, r4, #252
	bl	mpi_list_del_obj_rcu
	cbnz	r0, .L106
	mov	r0, r5
	add	sp, sp, #28
	@ sp needed
	pop	{r4, r5, lr}
	b	mpi_obj_unref
.L106:
	add	sp, sp, #28
	@ sp needed
	pop	{r4, r5, pc}
.L116:
	.align	2
.L115:
	.word	.LC5
	.word	.LANCHOR0+73
	.fnend
	.size	mpi_node_unbind, .-mpi_node_unbind
	.align	1
	.global	mpi_node_bind
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpi_node_bind, %function
mpi_node_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, lr}
	.save {r4, r5, r6, lr}
	mov	r5, r0
	.pad #24
	sub	sp, sp, #24
	mov	r4, r1
	cbz	r0, .L118
	ldr	r3, [r0, #12]
	and	r3, r3, #6
	cmp	r3, #2
	beq	.L119
.L118:
	mov	r6, #-1
.L117:
	mov	r0, r6
	add	sp, sp, #24
	@ sp needed
	pop	{r4, r5, r6, pc}
.L119:
	bl	mpi_obj_ref
	cbz	r4, .L121
	ldr	r3, [r4, #12]
	and	r3, r3, #6
	cmp	r3, #2
	beq	.L122
.L121:
	mov	r6, #-1
.L123:
	mov	r0, r5
	bl	mpi_obj_unref
	b	.L117
.L122:
	mov	r0, r4
	bl	mpi_obj_ref
	ldr	r3, [r5, #12]
	lsls	r2, r3, #21
	bmi	.L128
	ldr	r3, [r4, #12]
	tst	r3, #9216
	bne	.L128
	mov	r1, r4
	add	r0, r5, #260
	bl	mpi_list_add_tail_obj_rcu
	mov	r0, r5
	bl	mpi_obj_ref
	mov	r1, r5
	add	r0, r4, #252
	bl	mpi_list_add_tail_obj_rcu
	mov	r0, r4
	bl	mpi_obj_ref
	ldr	r3, [r4, #12]
	orr	r3, r3, #8192
	str	r3, [r4, #12]
	ldr	r3, [r4, #44]
	ldr	r3, [r3, #72]
	cbz	r3, .L125
	mov	r1, r5
	ldr	r0, [r4, #248]
	blx	r3
	str	r0, [r4, #248]
.L125:
	ldr	r3, [r4]
	movs	r1, #5
	ldr	r2, .L142
	movs	r0, #0
	str	r3, [sp, #16]
	ldr	r3, [r4, #44]
	ldr	r3, [r3, #44]
	str	r3, [sp, #12]
	ldr	r3, [r5]
	str	r3, [sp, #8]
	ldr	r3, [r5, #44]
	ldr	r3, [r3, #44]
	str	r3, [sp, #4]
	movw	r3, #809
	str	r3, [sp]
	ldr	r3, .L142+4
	bl	vlog
	ldr	r3, [r4, #12]
	lsls	r3, r3, #17
	bpl	.L126
	mov	r0, r4
	bl	mpi_node_streamon
.L126:
	ldr	r6, [r5, #12]
	ands	r6, r6, #16384
	beq	.L124
	mov	r0, r5
	movs	r6, #0
	bl	mpi_node_streamon
.L124:
	mov	r0, r4
	bl	mpi_obj_unref
	b	.L123
.L128:
	mov	r6, #-1
	b	.L124
.L143:
	.align	2
.L142:
	.word	.LC6
	.word	.LANCHOR0+89
	.fnend
	.size	mpi_node_bind, .-mpi_node_bind
	.align	1
	.global	mpi_node_set_params
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpi_node_set_params, %function
mpi_node_set_params:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, lr}
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r6, r1
	cbz	r0, .L145
	ldr	r3, [r0, #12]
	and	r3, r3, #6
	cmp	r3, #2
	beq	.L146
.L145:
	mov	r5, #-1
.L144:
	mov	r0, r5
	pop	{r4, r5, r6, pc}
.L146:
	bl	mpi_obj_ref
	ldr	r3, [r4, #44]
	cbz	r3, .L148
	ldr	r3, [r3, #80]
	cbz	r3, .L148
	mov	r2, r6
	movs	r1, #4
	mov	r0, r4
	blx	r3
	mov	r5, r0
	cbnz	r0, .L148
	ldr	r0, [r4, #80]
	cbz	r0, .L149
	bl	kfree
.L149:
	str	r6, [r4, #80]
.L148:
	mov	r0, r4
	bl	mpi_obj_unref
	b	.L144
	.fnend
	.size	mpi_node_set_params, .-mpi_node_set_params
	.align	1
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	_mpi_job_discard, %function
_mpi_job_discard:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}
	.save {r4, lr}
	movs	r1, #1
	mov	r4, r0
	bl	mpi_job_cancel
	mov	r0, r4
	pop	{r4, lr}
	b	mpi_obj_unref
	.fnend
	.size	_mpi_job_discard, .-_mpi_job_discard
	.align	1
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	__init_completion, %function
__init_completion:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movs	r3, #0
	ldr	r2, .L164
	str	r3, [r0], #4
	ldr	r1, .L164+4
	b	__init_swait_queue_head
.L165:
	.align	2
.L164:
	.word	.LANCHOR1
	.word	.LC7
	.fnend
	.size	__init_completion, .-__init_completion
	.align	1
	.global	mpi_dev_run_job
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpi_dev_run_job, %function
mpi_dev_run_job:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r3, r4, r5, r6, r7, r8, r9, lr}
	.save {r3, r4, r5, r6, r7, r8, r9, lr}
	mov	r8, r0
	mov	r6, r1
	cbz	r0, .L167
	ldr	r3, [r0, #12]
	and	r3, r3, #6
	cmp	r3, #2
	beq	.L168
.L167:
	movs	r4, #0
.L166:
	mov	r0, r4
	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
.L168:
	mov	r9, r0
	movs	r5, #0
	ldr	r4, [r9, #88]!
	subs	r4, r4, #48
.L170:
	add	r3, r4, #48
	cmp	r3, r9
	bne	.L172
	mov	r2, r6
	movs	r1, #0
	ldr	r0, [r8, #84]
	bl	mpi_job_pool_choose_job
	mov	r4, r0
	cbz	r0, .L173
	cbz	r5, .L174
	cbz	r6, .L174
	mov	r1, r5
	blx	r6
	bics	r4, r4, r0, asr #32
	it	cs
	movcs	r4, r5
.L174:
	ldr	r3, [r4, #48]
	cbz	r3, .L207
	ldr	r2, [r3, #12]
	and	r2, r2, #6
	cmp	r2, #2
	beq	.L177
.L207:
	mov	r0, r4
	bl	mpi_job_set_running
	cmp	r0, #0
	bge	.L175
	b	.L180
.L172:
	ldr	r0, [r4, #268]
	cbz	r0, .L171
	bl	mpi_queue_front_obj
	mov	r7, r0
	cbz	r0, .L171
	ldr	r3, [r0, #68]
	cmp	r3, #2
	bne	.L171
	cbz	r5, .L181
	cbz	r6, .L171
	mov	r1, r0
	mov	r0, r5
	blx	r6
	bics	r5, r5, r0, asr #32
	it	cs
	movcs	r5, r7
.L171:
	ldr	r4, [r4, #48]
	subs	r4, r4, #48
	b	.L170
.L181:
	mov	r5, r0
	b	.L171
.L173:
	cbnz	r5, .L182
.L180:
	movs	r4, #0
.L175:
	b	.L166
.L182:
	mov	r4, r5
	b	.L174
.L177:
	ldr	r0, [r3, #268]
	cbz	r0, .L179
	mov	r1, r4
	bl	mpi_queue_try_pop_obj
	cbnz	r0, .L179
	b	.L180
.L179:
	mov	r0, r4
	bl	mpi_obj_unref
	b	.L207
	.fnend
	.size	mpi_dev_run_job, .-mpi_dev_run_job
	.align	1
	.global	mpi_dev_register
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpi_dev_register, %function
mpi_dev_register:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r0, r1, r2, r4, r5, lr}
	.save {r4, r5, lr}
	.pad #12
	add	r3, r0, #88
	mov	r4, r0
	str	r3, [r0, #88]
	str	r3, [r0, #92]
	mov	r5, r1
	mov	r0, r2
	mov	r1, #3264
	bl	kstrdup
	movs	r3, #0
	mov	r1, r3
	orr	r2, r5, #64
	str	r0, [r4, #44]
	mov	r0, r4
	bl	mpi_obj_register
	movs	r1, #10
	mov	r0, r4
	bl	mpi_job_pool_create
	str	r0, [r4, #84]
	cbnz	r0, .L209
	mov	r0, r4
	bl	mpi_obj_unregister
	mov	r0, #-1
.L208:
	add	sp, sp, #12
	@ sp needed
	pop	{r4, r5, pc}
.L209:
	ldr	r3, [r4, #44]
	movs	r1, #5
	ldr	r2, .L211
	movs	r0, #0
	str	r3, [sp, #4]
	mov	r3, #1168
	str	r3, [sp]
	ldr	r3, .L211+4
	bl	vlog
	movs	r0, #0
	b	.L208
.L212:
	.align	2
.L211:
	.word	.LC8
	.word	.LANCHOR0+103
	.fnend
	.size	mpi_dev_register, .-mpi_dev_register
	.global	__aeabi_idivmod
	.global	__aeabi_uidivmod
	.align	1
	.global	mpi_node_set_in_frame_rate
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpi_node_set_in_frame_rate, %function
mpi_node_set_in_frame_rate:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, r8, r9, lr}
	.save {r4, r5, r6, r7, r8, r9, lr}
	subs	r5, r2, #0
	ldr	r7, .L246
	.pad #44
	sub	sp, sp, #44
	mov	r4, r0
	mov	r6, r1
	ldr	r3, [r7]
	str	r3, [sp, #36]
	blt	.L236
	cmp	r1, r5
	blt	.L236
	subs	r3, r1, #1
	cmp	r3, #29
	bhi	.L236
	cbnz	r5, .L215
	adds	r4, r4, #120
	movs	r3, #1
	add	r6, r6, r4
.L216:
	strb	r3, [r4], #1
	cmp	r4, r6
	bne	.L216
.L224:
	movs	r0, #0
.L213:
	ldr	r2, [sp, #36]
	ldr	r3, [r7]
	cmp	r2, r3
	beq	.L233
	bl	__stack_chk_fail
.L215:
	str	r1, [r4, #116]
	mov	r0, r6
	mov	r1, r5
	bl	__aeabi_idivmod
	mov	r9, r0
	mov	r8, r1
	cbnz	r1, .L217
	adds	r4, r4, #120
.L218:
	mov	r0, r8
	mov	r1, r9
	bl	__aeabi_idivmod
	add	r8, r8, #1
	cmp	r6, r8
	strb	r1, [r4], #1
	bne	.L218
	b	.L224
.L217:
	subs	r3, r6, r5
	cmp	r5, r3
	ble	.L220
	movs	r2, #0
	add	r1, r4, #120
	mov	r0, r2
.L221:
	strb	r0, [r1, r2, lsl #1]
	adds	r2, r2, #1
	cmp	r5, r2
	bgt	.L221
	adds	r4, r4, #121
	movs	r2, #0
	movs	r1, #1
.L222:
	cmp	r3, r2
	ble	.L224
	strb	r1, [r4, r2, lsl #1]
	adds	r2, r2, #1
	b	.L222
.L220:
	cmp	r6, r5
	ble	.L224
	add	r0, sp, #6
	movs	r2, #0
	mov	r6, r2
	mov	r1, r0
.L226:
	adds	r2, r2, #1
	strb	r6, [r1], #1
	cmp	r5, r2
	bgt	.L226
.L227:
	mov	r1, r0
	movs	r2, #0
.L229:
	adds	r2, r2, #1
	ldrb	r6, [r1]	@ zero_extendqisi2
	cmp	r2, r3
	add	r6, r6, #1
	strb	r6, [r1], #1
	beq	.L228
	cmp	r5, r2
	bgt	.L229
.L228:
	subs	r3, r3, r2
	bne	.L227
	mov	r2, r3
	mov	lr, r3
	mov	r8, #1
.L232:
	adds	r1, r4, r2
	add	r6, r2, #121
	add	r6, r6, r4
	mov	ip, #0
	strb	lr, [r1, #120]
	ldrb	r1, [r0], #1	@ zero_extendqisi2
.L230:
	cmp	ip, r1
	blt	.L231
	adds	r3, r3, #1
	adds	r1, r1, #1
	cmp	r5, r3
	add	r2, r2, r1
	bgt	.L232
	add	r4, r4, r2
	movs	r3, #0
	strb	r3, [r4, #120]
	b	.L224
.L231:
	strb	r8, [r6], #1
	add	ip, ip, #1
	b	.L230
.L236:
	mov	r0, #-1
	b	.L213
.L233:
	add	sp, sp, #44
	@ sp needed
	pop	{r4, r5, r6, r7, r8, r9, pc}
.L247:
	.align	2
.L246:
	.word	__stack_chk_guard
	.fnend
	.size	mpi_node_set_in_frame_rate, .-mpi_node_set_in_frame_rate
	.align	1
	.global	mpi_node_add_in_watcher
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpi_node_add_in_watcher, %function
mpi_node_add_in_watcher:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r0, r1, r2, r3, r4, lr}
	.save {r4, lr}
	.pad #16
	mov	r4, r0
	cbz	r0, .L255
	ldr	r3, [r0, #12]
	and	r3, r3, #6
	cmp	r3, #2
	beq	.L250
.L255:
	add	sp, sp, #16
	@ sp needed
	pop	{r4, pc}
.L250:
	str	r1, [sp, #12]
	movs	r1, #5
	ldr	r3, [r0]
	ldr	r2, .L256
	str	r3, [sp, #8]
	ldr	r3, [r0, #44]
	movs	r0, #0
	ldr	r3, [r3, #44]
	str	r3, [sp, #4]
	movs	r3, #183
	str	r3, [sp]
	ldr	r3, .L256+4
	bl	vlog
	ldr	r3, [r4, #284]
	adds	r3, r3, #1
	str	r3, [r4, #284]
	b	.L255
.L257:
	.align	2
.L256:
	.word	.LC9
	.word	.LANCHOR0+120
	.fnend
	.size	mpi_node_add_in_watcher, .-mpi_node_add_in_watcher
	.align	1
	.global	mpi_node_add_in_filter
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpi_node_add_in_filter, %function
mpi_node_add_in_filter:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r0, r1, r2, r3, r4, lr}
	.save {r4, lr}
	.pad #16
	mov	r4, r0
	cbz	r0, .L265
	ldr	r3, [r0, #12]
	and	r3, r3, #6
	cmp	r3, #2
	beq	.L260
.L265:
	add	sp, sp, #16
	@ sp needed
	pop	{r4, pc}
.L260:
	str	r1, [sp, #12]
	movs	r1, #5
	ldr	r3, [r0]
	ldr	r2, .L266
	str	r3, [sp, #8]
	ldr	r3, [r0, #44]
	movs	r0, #0
	ldr	r3, [r3, #44]
	str	r3, [sp, #4]
	movs	r3, #184
	str	r3, [sp]
	ldr	r3, .L266+4
	bl	vlog
	ldr	r3, [r4, #288]
	adds	r3, r3, #1
	str	r3, [r4, #288]
	b	.L265
.L267:
	.align	2
.L266:
	.word	.LC10
	.word	.LANCHOR0+144
	.fnend
	.size	mpi_node_add_in_filter, .-mpi_node_add_in_filter
	.align	1
	.global	mpi_node_add_out_watcher
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpi_node_add_out_watcher, %function
mpi_node_add_out_watcher:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r0, r1, r2, r3, r4, lr}
	.save {r4, lr}
	.pad #16
	mov	r4, r0
	cbz	r0, .L275
	ldr	r3, [r0, #12]
	and	r3, r3, #6
	cmp	r3, #2
	beq	.L270
.L275:
	add	sp, sp, #16
	@ sp needed
	pop	{r4, pc}
.L270:
	str	r1, [sp, #12]
	movs	r1, #5
	ldr	r3, [r0]
	ldr	r2, .L276
	str	r3, [sp, #8]
	ldr	r3, [r0, #44]
	movs	r0, #0
	ldr	r3, [r3, #44]
	str	r3, [sp, #4]
	movs	r3, #185
	str	r3, [sp]
	ldr	r3, .L276+4
	bl	vlog
	ldr	r3, [r4, #296]
	adds	r3, r3, #1
	str	r3, [r4, #296]
	b	.L275
.L277:
	.align	2
.L276:
	.word	.LC11
	.word	.LANCHOR0+167
	.fnend
	.size	mpi_node_add_out_watcher, .-mpi_node_add_out_watcher
	.align	1
	.global	mpi_node_add_out_filter
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpi_node_add_out_filter, %function
mpi_node_add_out_filter:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r0, r1, r2, r3, r4, lr}
	.save {r4, lr}
	.pad #16
	mov	r4, r0
	cbz	r0, .L285
	ldr	r3, [r0, #12]
	and	r3, r3, #6
	cmp	r3, #2
	beq	.L280
.L285:
	add	sp, sp, #16
	@ sp needed
	pop	{r4, pc}
.L280:
	str	r1, [sp, #12]
	movs	r1, #5
	ldr	r3, [r0]
	ldr	r2, .L286
	str	r3, [sp, #8]
	ldr	r3, [r0, #44]
	movs	r0, #0
	ldr	r3, [r3, #44]
	str	r3, [sp, #4]
	movs	r3, #186
	str	r3, [sp]
	ldr	r3, .L286+4
	bl	vlog
	ldr	r3, [r4, #300]
	adds	r3, r3, #1
	str	r3, [r4, #300]
	b	.L285
.L287:
	.align	2
.L286:
	.word	.LC12
	.word	.LANCHOR0+192
	.fnend
	.size	mpi_node_add_out_filter, .-mpi_node_add_out_filter
	.align	1
	.global	mpi_node_del_in_watcher
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpi_node_del_in_watcher, %function
mpi_node_del_in_watcher:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r0, r1, r2, r3, r4, lr}
	.save {r4, lr}
	.pad #16
	mov	r4, r0
	cbz	r0, .L299
	ldr	r3, [r0, #12]
	and	r3, r3, #6
	cmp	r3, #2
	beq	.L290
.L299:
	add	sp, sp, #16
	@ sp needed
	pop	{r4, pc}
.L290:
	str	r1, [sp, #12]
	movs	r1, #5
	ldr	r3, [r0]
	ldr	r2, .L300
	str	r3, [sp, #8]
	ldr	r3, [r0, #44]
	movs	r0, #0
	ldr	r3, [r3, #44]
	str	r3, [sp, #4]
	movs	r3, #187
	str	r3, [sp]
	ldr	r3, .L300+4
	bl	vlog
	ldr	r3, [r4, #284]
	cbz	r3, .L292
	subs	r3, r3, #1
	str	r3, [r4, #284]
.L292:
	movs	r1, #0
	mov	r0, r4
	bl	mpi_node_cleanup_in_buffer
	b	.L299
.L301:
	.align	2
.L300:
	.word	.LC13
	.word	.LANCHOR0+216
	.fnend
	.size	mpi_node_del_in_watcher, .-mpi_node_del_in_watcher
	.align	1
	.global	mpi_node_del_in_filter
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpi_node_del_in_filter, %function
mpi_node_del_in_filter:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r0, r1, r2, r3, r4, lr}
	.save {r4, lr}
	.pad #16
	mov	r4, r0
	cbz	r0, .L313
	ldr	r3, [r0, #12]
	and	r3, r3, #6
	cmp	r3, #2
	beq	.L304
.L313:
	add	sp, sp, #16
	@ sp needed
	pop	{r4, pc}
.L304:
	str	r1, [sp, #12]
	movs	r1, #5
	ldr	r3, [r0]
	ldr	r2, .L314
	str	r3, [sp, #8]
	ldr	r3, [r0, #44]
	movs	r0, #0
	ldr	r3, [r3, #44]
	str	r3, [sp, #4]
	movs	r3, #188
	str	r3, [sp]
	ldr	r3, .L314+4
	bl	vlog
	ldr	r3, [r4, #288]
	cbz	r3, .L306
	subs	r3, r3, #1
	str	r3, [r4, #288]
.L306:
	movs	r1, #0
	mov	r0, r4
	bl	mpi_node_cleanup_in_buffer
	b	.L313
.L315:
	.align	2
.L314:
	.word	.LC14
	.word	.LANCHOR0+240
	.fnend
	.size	mpi_node_del_in_filter, .-mpi_node_del_in_filter
	.align	1
	.global	mpi_node_del_out_watcher
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpi_node_del_out_watcher, %function
mpi_node_del_out_watcher:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r0, r1, r2, r3, r4, lr}
	.save {r4, lr}
	.pad #16
	mov	r4, r0
	cbz	r0, .L327
	ldr	r3, [r0, #12]
	and	r3, r3, #6
	cmp	r3, #2
	beq	.L318
.L327:
	add	sp, sp, #16
	@ sp needed
	pop	{r4, pc}
.L318:
	str	r1, [sp, #12]
	movs	r1, #5
	ldr	r3, [r0]
	ldr	r2, .L328
	str	r3, [sp, #8]
	ldr	r3, [r0, #44]
	movs	r0, #0
	ldr	r3, [r3, #44]
	str	r3, [sp, #4]
	movs	r3, #189
	str	r3, [sp]
	ldr	r3, .L328+4
	bl	vlog
	ldr	r3, [r4, #296]
	cbz	r3, .L320
	subs	r3, r3, #1
	str	r3, [r4, #296]
.L320:
	movs	r1, #0
	mov	r0, r4
	bl	mpi_node_cleanup_out_buffer
	b	.L327
.L329:
	.align	2
.L328:
	.word	.LC15
	.word	.LANCHOR0+263
	.fnend
	.size	mpi_node_del_out_watcher, .-mpi_node_del_out_watcher
	.align	1
	.global	mpi_node_del_out_filter
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpi_node_del_out_filter, %function
mpi_node_del_out_filter:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r0, r1, r2, r3, r4, lr}
	.save {r4, lr}
	.pad #16
	mov	r4, r0
	cbz	r0, .L341
	ldr	r3, [r0, #12]
	and	r3, r3, #6
	cmp	r3, #2
	beq	.L332
.L341:
	add	sp, sp, #16
	@ sp needed
	pop	{r4, pc}
.L332:
	str	r1, [sp, #12]
	movs	r1, #5
	ldr	r3, [r0]
	ldr	r2, .L342
	str	r3, [sp, #8]
	ldr	r3, [r0, #44]
	movs	r0, #0
	ldr	r3, [r3, #44]
	str	r3, [sp, #4]
	movs	r3, #190
	str	r3, [sp]
	ldr	r3, .L342+4
	bl	vlog
	ldr	r3, [r4, #300]
	cbz	r3, .L334
	subs	r3, r3, #1
	str	r3, [r4, #300]
.L334:
	movs	r1, #0
	mov	r0, r4
	bl	mpi_node_cleanup_out_buffer
	b	.L341
.L343:
	.align	2
.L342:
	.word	.LC16
	.word	.LANCHOR0+288
	.fnend
	.size	mpi_node_del_out_filter, .-mpi_node_del_out_filter
	.align	1
	.global	mpi_node_enable_auto_streamon
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpi_node_enable_auto_streamon, %function
mpi_node_enable_auto_streamon:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #12]
	cbz	r1, .L345
	orr	r1, r3, #16384
	lsls	r3, r3, #18
	str	r1, [r0, #12]
	bpl	.L344
	b	mpi_node_streamon
.L345:
	bic	r3, r3, #16384
	str	r3, [r0, #12]
.L344:
	bx	lr
	.fnend
	.size	mpi_node_enable_auto_streamon, .-mpi_node_enable_auto_streamon
	.align	1
	.global	mpi_node_get_in_buffer
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpi_node_get_in_buffer, %function
mpi_node_get_in_buffer:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, lr}
	.save {r4, r5, r6, r7, lr}
	mov	r4, r0
	.pad #28
	sub	sp, sp, #28
	mov	r6, r1
	cbz	r0, .L351
	ldr	r3, [r0, #12]
	and	r3, r3, #6
	cmp	r3, #2
	beq	.L352
.L351:
	movs	r5, #0
.L350:
	mov	r0, r5
	add	sp, sp, #28
	@ sp needed
	pop	{r4, r5, r6, r7, pc}
.L352:
	bl	mpi_obj_ref
	cbz	r6, .L354
	.syntax unified
@ 29 "./arch/arm/include/asm/irqflags.h" 1
		mrs	r2, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
	.thumb
	.syntax unified
	ldr	r5, [r4, #12]
	add	r0, r4, #316
	ldr	r3, .L369
	ands	r5, r5, #4096
	bne	.L355
	.syntax unified
@ 171 "./arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, r2	@ local_irq_restore
@ 0 "" 2
	.thumb
	.syntax unified
	ldr	r2, [r4, #340]
	str	r5, [r4, #316]
	umull	r2, r3, r2, r3
	lsrs	r1, r3, #1
	bl	wait_for_completion_interruptible_timeout
.L356:
	mov	r0, r4
	bl	mpi_obj_unref
	b	.L350
.L355:
	movs	r1, #0
	str	r1, [r4, #316]
	.syntax unified
@ 171 "./arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, r2	@ local_irq_restore
@ 0 "" 2
	.thumb
	.syntax unified
	ldr	r2, [r4, #340]
	umull	r2, r3, r2, r3
	lsrs	r1, r3, #1
	bl	wait_for_completion_interruptible_timeout
.L354:
	.syntax unified
@ 29 "./arch/arm/include/asm/irqflags.h" 1
		mrs	r7, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
	.thumb
	.syntax unified
	ldr	r5, [r4, #308]
	cbz	r5, .L357
	mov	r0, r5
	bl	mpi_obj_ref
	ldr	r5, [r4, #308]
	ldr	r3, [r4, #44]
	ldr	r0, .L369+4
	ldr	r1, .L369+8
	ldr	r3, [r3, #44]
	cmp	r6, #0
	it	eq
	moveq	r1, r0
	ldr	r2, [r4]
	ldr	r0, [r5]
	strd	r3, r2, [sp, #4]
	movw	r3, #565
	strd	r1, r0, [sp, #12]
	movs	r1, #5
	str	r3, [sp]
	movs	r0, #0
	ldr	r3, .L369+12
	ldr	r2, .L369+16
	bl	vlog
	ldr	r6, [r4, #284]
	cbnz	r6, .L357
	ldr	r3, [r4, #288]
	cmp	r3, #1
	bne	.L357
	ldr	r0, [r4, #308]
	bl	mpi_obj_unref
	str	r6, [r4, #308]
.L357:
	.syntax unified
@ 171 "./arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, r7	@ local_irq_restore
@ 0 "" 2
	.thumb
	.syntax unified
	mov	r1, r5
	mov	r0, r4
	bl	add_user_to_buf
	b	.L356
.L370:
	.align	2
.L369:
	.word	-1431655765
	.word	.LC18
	.word	.LC17
	.word	.LANCHOR0+312
	.word	.LC19
	.fnend
	.size	mpi_node_get_in_buffer, .-mpi_node_get_in_buffer
	.align	1
	.global	mpi_node_pick_in_buffer
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpi_node_pick_in_buffer, %function
mpi_node_pick_in_buffer:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, lr}
	.save {r4, r5, r6, lr}
	mov	r4, r0
	ldr	r5, .L372
	mov	r1, r5
	bl	mpi_node_add_in_watcher
	movs	r1, #1
	mov	r0, r4
	bl	mpi_node_get_in_buffer
	mov	r1, r5
	mov	r6, r0
	mov	r0, r4
	bl	mpi_node_del_in_watcher
	mov	r0, r6
	pop	{r4, r5, r6, pc}
.L373:
	.align	2
.L372:
	.word	.LC20
	.fnend
	.size	mpi_node_pick_in_buffer, .-mpi_node_pick_in_buffer
	.align	1
	.global	mpi_node_get_out_buffer
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpi_node_get_out_buffer, %function
mpi_node_get_out_buffer:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, lr}
	.save {r4, r5, r6, r7, lr}
	mov	r4, r0
	.pad #28
	sub	sp, sp, #28
	mov	r6, r1
	cbz	r0, .L375
	ldr	r3, [r0, #12]
	and	r3, r3, #6
	cmp	r3, #2
	beq	.L376
.L375:
	movs	r5, #0
.L374:
	mov	r0, r5
	add	sp, sp, #28
	@ sp needed
	pop	{r4, r5, r6, r7, pc}
.L376:
	bl	mpi_obj_ref
	cbz	r6, .L378
	.syntax unified
@ 29 "./arch/arm/include/asm/irqflags.h" 1
		mrs	r2, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
	.thumb
	.syntax unified
	ldr	r5, [r4, #12]
	add	r0, r4, #328
	ldr	r3, .L393
	ands	r5, r5, #4096
	bne	.L379
	.syntax unified
@ 171 "./arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, r2	@ local_irq_restore
@ 0 "" 2
	.thumb
	.syntax unified
	ldr	r2, [r4, #344]
	str	r5, [r4, #328]
	umull	r2, r3, r2, r3
	lsrs	r1, r3, #1
	bl	wait_for_completion_interruptible_timeout
.L380:
	mov	r0, r4
	bl	mpi_obj_unref
	b	.L374
.L379:
	movs	r1, #0
	str	r1, [r4, #328]
	.syntax unified
@ 171 "./arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, r2	@ local_irq_restore
@ 0 "" 2
	.thumb
	.syntax unified
	ldr	r2, [r4, #344]
	umull	r2, r3, r2, r3
	lsrs	r1, r3, #1
	bl	wait_for_completion_interruptible_timeout
.L378:
	.syntax unified
@ 29 "./arch/arm/include/asm/irqflags.h" 1
		mrs	r7, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
	.thumb
	.syntax unified
	ldr	r5, [r4, #312]
	cbz	r5, .L381
	mov	r0, r5
	bl	mpi_obj_ref
	ldr	r5, [r4, #312]
	ldr	r3, [r4, #44]
	ldr	r0, .L393+4
	ldr	r1, .L393+8
	ldr	r3, [r3, #44]
	cmp	r6, #0
	it	eq
	moveq	r1, r0
	ldr	r2, [r4]
	ldr	r0, [r5]
	strd	r3, r2, [sp, #4]
	movw	r3, #617
	strd	r1, r0, [sp, #12]
	movs	r1, #5
	str	r3, [sp]
	movs	r0, #0
	ldr	r3, .L393+12
	ldr	r2, .L393+16
	bl	vlog
	ldr	r6, [r4, #296]
	cbnz	r6, .L381
	ldr	r3, [r4, #300]
	cmp	r3, #1
	bne	.L381
	ldr	r0, [r4, #312]
	bl	mpi_obj_unref
	str	r6, [r4, #312]
.L381:
	.syntax unified
@ 171 "./arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, r7	@ local_irq_restore
@ 0 "" 2
	.thumb
	.syntax unified
	mov	r1, r5
	mov	r0, r4
	bl	add_user_to_buf
	b	.L380
.L394:
	.align	2
.L393:
	.word	-1431655765
	.word	.LC18
	.word	.LC17
	.word	.LANCHOR0+335
	.word	.LC21
	.fnend
	.size	mpi_node_get_out_buffer, .-mpi_node_get_out_buffer
	.align	1
	.global	mpi_node_pick_out_buffer
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpi_node_pick_out_buffer, %function
mpi_node_pick_out_buffer:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, lr}
	.save {r4, r5, r6, lr}
	mov	r4, r0
	ldr	r5, .L396
	mov	r1, r5
	bl	mpi_node_add_out_watcher
	movs	r1, #1
	mov	r0, r4
	bl	mpi_node_get_out_buffer
	mov	r1, r5
	mov	r6, r0
	mov	r0, r4
	bl	mpi_node_del_out_watcher
	mov	r0, r6
	pop	{r4, r5, r6, pc}
.L397:
	.align	2
.L396:
	.word	.LC20
	.fnend
	.size	mpi_node_pick_out_buffer, .-mpi_node_pick_out_buffer
	.align	1
	.global	mpi_dev_request_job
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpi_dev_request_job, %function
mpi_dev_request_job:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r0, r1, r2, r4, r5, lr}
	.save {r4, r5, lr}
	.pad #12
	mov	r4, r0
	ldr	r3, [r0, #44]
	movs	r1, #5
	ldr	r2, .L409
	movs	r0, #0
	str	r3, [sp, #4]
	movw	r3, #1002
	str	r3, [sp]
	ldr	r3, .L409+4
	bl	vlog
	cbz	r4, .L399
	ldr	r3, [r4, #12]
	and	r3, r3, #6
	cmp	r3, #2
	beq	.L400
.L399:
	movs	r5, #0
.L398:
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	pop	{r4, r5, pc}
.L400:
	ldr	r0, [r4, #84]
	bl	mpi_job_pool_request_job
	mov	r5, r0
	cbz	r0, .L402
	mov	r0, r4
	bl	mpi_obj_ref
	str	r4, [r5, #44]
.L402:
	b	.L398
.L410:
	.align	2
.L409:
	.word	.LC22
	.word	.LANCHOR0+359
	.fnend
	.size	mpi_dev_request_job, .-mpi_dev_request_job
	.align	1
	.global	mpi_dev_request_job_for_node
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpi_dev_request_job_for_node, %function
mpi_dev_request_job_for_node:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, lr}
	.save {r4, r5, lr}
	.pad #20
	sub	sp, sp, #20
	ldr	r3, [r1]
	mov	r5, r0
	mov	r4, r1
	ldr	r2, .L422
	movs	r1, #5
	str	r3, [sp, #8]
	ldr	r3, [r0, #44]
	movs	r0, #0
	str	r3, [sp, #4]
	movw	r3, #1028
	str	r3, [sp]
	ldr	r3, .L422+4
	bl	vlog
	cbz	r4, .L412
	ldr	r3, [r4, #12]
	and	r3, r3, #6
	cmp	r3, #2
	beq	.L413
.L412:
	movs	r5, #0
.L411:
	mov	r0, r5
	add	sp, sp, #20
	@ sp needed
	pop	{r4, r5, pc}
.L413:
	mov	r0, r5
	bl	mpi_dev_request_job
	mov	r5, r0
	cbz	r0, .L415
	mov	r0, r4
	bl	mpi_obj_ref
	str	r4, [r5, #48]
.L415:
	b	.L411
.L423:
	.align	2
.L422:
	.word	.LC23
	.word	.LANCHOR0+379
	.fnend
	.size	mpi_dev_request_job_for_node, .-mpi_dev_request_job_for_node
	.align	1
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	atomic_add.constprop.23, %function
atomic_add.constprop.23:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	pld	[r0]
	.syntax unified
@ 223 "./arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r3, [r0]
	add	r3, r3, #1
	strex	r2, r3, [r0]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.thumb
	.syntax unified
	bx	lr
	.fnend
	.size	atomic_add.constprop.23, .-atomic_add.constprop.23
	.align	1
	.global	mpi_node_destroy
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpi_node_destroy, %function
mpi_node_destroy:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, lr}
	.save {r4, r5, r6, r7, lr}
	.pad #20
	sub	sp, sp, #20
	ldr	r3, [r0]
	mov	r4, r0
	ldr	r2, .L455
	movs	r1, #5
	str	r3, [sp, #8]
	ldr	r3, [r0, #44]
	movs	r0, #0
	ldr	r3, [r3, #44]
	str	r3, [sp, #4]
	movw	r3, #871
	str	r3, [sp]
	ldr	r3, .L455+4
	bl	vlog
	.syntax unified
@ 29 "./arch/arm/include/asm/irqflags.h" 1
		mrs	r1, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
	.thumb
	.syntax unified
	ldrd	r2, r3, [r4, #48]
	str	r3, [r2, #4]
	str	r2, [r3]
	mov	r2, #256
	mov	r3, #290
	strd	r2, r3, [r4, #48]
	.syntax unified
@ 171 "./arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, r1	@ local_irq_restore
@ 0 "" 2
	.thumb
	.syntax unified
	ldr	r3, [r4, #12]
	movs	r1, #1
	mov	r0, r4
	orr	r3, r3, #1024
	str	r3, [r4, #12]
	bl	mpi_node_flush
	cbz	r4, .L426
	mov	r0, r4
	bl	mpi_obj_ref
.L426:
	ldr	r3, [r4, #12]
	bic	r3, r3, #2
	str	r3, [r4, #12]
	bl	synchronize_rcu
	ldr	r0, [r4, #60]
	cbz	r0, .L427
	mov	r1, r4
	bl	mpi_buf_pool_del_user
.L427:
	add	r6, r4, #252
.L428:
	mov	r0, r6
	bl	mpi_list_pop_obj_rcu
	mov	r5, r0
	cmp	r0, #0
	bne	.L429
	add	r6, r4, #260
.L430:
	mov	r0, r6
	bl	mpi_list_pop_obj_rcu
	mov	r5, r0
	cmp	r0, #0
	bne	.L431
	ldr	r0, [r4, #268]
	cbz	r0, .L432
	mov	r1, r5
	bl	mpi_queue_destroy
.L432:
	.syntax unified
@ 29 "./arch/arm/include/asm/irqflags.h" 1
		mrs	r3, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
	.thumb
	.syntax unified
	ldr	r0, [r4, #248]
	cbz	r0, .L433
	movs	r2, #0
	str	r2, [r4, #248]
.L433:
	.syntax unified
@ 171 "./arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, r3	@ local_irq_restore
@ 0 "" 2
	.thumb
	.syntax unified
	cbz	r0, .L434
	ldr	r3, [r4, #44]
	ldr	r3, [r3, #76]
	cbz	r3, .L434
	blx	r3
.L434:
	ldr	r5, [r4, #24]
	adds	r6, r5, #4
	add	r7, r5, #8
	mov	r0, r5
	bl	atomic_add.constprop.23
	mov	r0, r6
	bl	atomic_add.constprop.23
	ldr	r3, [r4, #16]
	cbnz	r3, .L435
	mov	r0, r7
	bl	complete_all
.L435:
	mov	r0, r4
	pld	[r6]
	bl	mpi_obj_unref
	mov	r0, r7
	bl	wait_for_completion
	.syntax unified
@ 224 "./arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.thumb
	.syntax unified
	pld	[r5]
	.syntax unified
@ 224 "./arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.thumb
	.syntax unified
	cbnz	r3, .L436
	mov	r0, r5
	bl	kfree
.L436:
	mov	r0, r4
	movs	r1, #1
	bl	mpi_node_cleanup_in_buffer
	movs	r1, #1
	mov	r0, r4
	bl	mpi_node_cleanup_out_buffer
	ldr	r0, [r4, #80]
	bl	kfree
	mov	r0, r4
	add	sp, sp, #20
	@ sp needed
	pop	{r4, r5, r6, r7, lr}
	b	mpi_obj_unregister
.L429:
	mov	r1, r4
	bl	mpi_node_unbind
	mov	r0, r5
	bl	mpi_obj_unref
	b	.L428
.L431:
	mov	r0, r4
	mov	r1, r5
	bl	mpi_node_unbind
	mov	r0, r5
	bl	mpi_obj_unref
	b	.L430
.L456:
	.align	2
.L455:
	.word	.LC24
	.word	.LANCHOR0+408
	.fnend
	.size	mpi_node_destroy, .-mpi_node_destroy
	.align	1
	.global	mpi_dev_create_node_with_params
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpi_dev_create_node_with_params, %function
mpi_dev_create_node_with_params:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, r8, r9, lr}
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r5, r0
	.pad #20
	sub	sp, sp, #20
	mov	r9, r1
	mov	r8, r2
	mov	r7, r3
	cbz	r0, .L458
	ldr	r6, [r0, #12]
	and	r6, r6, #6
	cmp	r6, #2
	beq	.L459
.L458:
	movs	r4, #0
.L457:
	mov	r0, r4
	add	sp, sp, #20
	@ sp needed
	pop	{r4, r5, r6, r7, r8, r9, pc}
.L459:
	bl	mpi_obj_ref
	ldr	r3, .L480
	mov	r1, #3520
	ldr	r0, [r3, #36]
	bl	kmem_cache_alloc
	mov	r4, r0
	cmp	r0, #0
	beq	.L461
	mov	r3, #-1
	str	r3, [r0, #76]
	movs	r3, #0
	strd	r3, r3, [r0, #96]
	strd	r3, r3, [r0, #104]
	strd	r3, r3, [r0, #152]
	strd	r3, r3, [r0, #160]
	ldr	r3, .L480+4
	str	r5, [r0, #44]
	str	r9, [r0, #56]
	ldr	r3, [r3]
	str	r3, [r0, #168]
	str	r3, [r0, #112]
	ldr	r3, .L480+8
	strd	r3, r3, [r0, #340]
	add	r3, r0, #252
	str	r3, [r0, #252]
	str	r3, [r0, #256]
	add	r3, r0, #260
	str	r3, [r0, #260]
	str	r3, [r0, #264]
	add	r3, r0, #84
	str	r3, [r0, #84]
	str	r3, [r0, #88]
	cmp	r8, #0
	beq	.L462
	mov	r1, r6
	ldr	r2, .L480+12
	mov	r0, r8
	bl	mpi_queue_create
	mov	r6, r0
	str	r0, [r4, #268]
	cbnz	r0, .L462
	mov	r0, r4
	mov	r4, r6
	bl	kfree
.L461:
	mov	r0, r5
	bl	mpi_obj_unref
	b	.L457
.L462:
	add	r0, r4, #272
	bl	__init_completion
	add	r0, r4, #316
	bl	__init_completion
	add	r0, r4, #328
	bl	__init_completion
	movs	r3, #0
	movs	r2, #96
	movs	r1, #1
	mov	r0, r4
	bl	mpi_obj_register
	.syntax unified
@ 29 "./arch/arm/include/asm/irqflags.h" 1
		mrs	r1, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
	.thumb
	.syntax unified
	ldr	r2, [r5, #92]
	add	r3, r4, #48
	add	r0, r5, #88
	str	r3, [r5, #92]
	strd	r0, r2, [r4, #48]
	str	r3, [r2]
	.syntax unified
@ 171 "./arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, r1	@ local_irq_restore
@ 0 "" 2
	.thumb
	.syntax unified
	cbz	r7, .L463
	mov	r1, r7
	mov	r0, r4
	bl	mpi_node_set_params
.L463:
	ldr	r3, [r5, #68]
	cbz	r3, .L464
	mov	r0, r4
	blx	r3
	str	r0, [r4, #248]
.L464:
	ldr	r3, [r4]
	movs	r1, #5
	ldr	r2, .L480+16
	movs	r0, #0
	str	r3, [sp, #8]
	ldr	r3, [r5, #44]
	str	r3, [sp, #4]
	mov	r3, #984
	str	r3, [sp]
	ldr	r3, .L480+20
	bl	vlog
	b	.L461
.L481:
	.align	2
.L480:
	.word	kmalloc_caches
	.word	jiffies
	.word	500000
	.word	_mpi_job_discard
	.word	.LC25
	.word	.LANCHOR0+425
	.fnend
	.size	mpi_dev_create_node_with_params, .-mpi_dev_create_node_with_params
	.align	1
	.global	mpi_node_release_buffer
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpi_node_release_buffer, %function
mpi_node_release_buffer:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r3, lr}
	.save {r3, lr}
	cbz	r0, .L493
	ldr	r3, [r0, #12]
	and	r3, r3, #6
	cmp	r3, #2
	beq	.L484
.L493:
	pop	{r3, pc}
.L484:
	cbz	r1, .L486
	ldr	r3, [r0, #76]
	cmp	r3, #0
	itttt	ge
	addge	r3, r3, #16
	movge	r2, #0
	addge	r3, r1, r3, lsl #2
	strge	r2, [r3, #4]
.L486:
	mov	r0, r1
	bl	mpi_obj_unref
	b	.L493
	.fnend
	.size	mpi_node_release_buffer, .-mpi_node_release_buffer
	.align	1
	.global	mpi_dev_unregister
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpi_dev_unregister, %function
mpi_dev_unregister:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	.save {r4, r5, r6, r7, lr}
	.pad #12
	mov	r5, r0
	ldr	r3, [r0, #44]
	movs	r1, #5
	ldr	r2, .L503
	movs	r0, #0
	str	r3, [sp, #4]
	movw	r3, #1119
	str	r3, [sp]
	ldr	r3, .L503+4
	bl	vlog
	cbz	r5, .L495
	mov	r0, r5
	bl	mpi_obj_ref
.L495:
	ldr	r3, [r5, #12]
	mov	r6, r5
	bic	r3, r3, #2
	str	r3, [r5, #12]
	bl	synchronize_rcu
	ldr	r0, [r6, #88]!
	ldr	r4, [r0], #-48
	subs	r4, r4, #48
.L496:
	add	r3, r0, #48
	cmp	r3, r6
	bne	.L497
	ldr	r0, [r5, #84]
	bl	mpi_job_pool_destroy
	ldr	r4, [r5, #24]
	ldr	r3, [r5, #12]
	adds	r6, r4, #4
	add	r7, r4, #8
	orr	r3, r3, #4
	mov	r0, r4
	str	r3, [r5, #12]
	bl	atomic_add.constprop.23
	mov	r0, r6
	bl	atomic_add.constprop.23
	ldr	r3, [r5, #16]
	cbnz	r3, .L498
	mov	r0, r7
	bl	complete_all
.L498:
	mov	r0, r5
	pld	[r6]
	bl	mpi_obj_unref
	mov	r0, r7
	bl	wait_for_completion
	.syntax unified
@ 224 "./arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.thumb
	.syntax unified
	pld	[r4]
	.syntax unified
@ 224 "./arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r3, [r4]
	sub	r3, r3, #1
	strex	r2, r3, [r4]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.thumb
	.syntax unified
	cbnz	r3, .L499
	mov	r0, r4
	bl	kfree
.L499:
	ldr	r0, [r5, #44]
	bl	kfree
	mov	r0, r5
	bl	mpi_obj_unregister
	movs	r0, #0
	add	sp, sp, #12
	@ sp needed
	pop	{r4, r5, r6, r7, pc}
.L497:
	bl	mpi_node_destroy
	ldr	r3, [r4, #48]
	mov	r0, r4
	sub	r4, r3, #48
	b	.L496
.L504:
	.align	2
.L503:
	.word	.LC26
	.word	.LANCHOR0+457
	.fnend
	.size	mpi_dev_unregister, .-mpi_dev_unregister
	.align	1
	.global	mpi_node_buffer_in
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpi_node_buffer_in, %function
mpi_node_buffer_in:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, lr}
	.save {r4, r5, r6, r7, lr}
	mov	r4, r0
	.pad #60
	sub	sp, sp, #60
	mov	r5, r1
	mov	r6, r2
	cbz	r0, .L506
	ldr	r3, [r0, #12]
	and	r3, r3, #6
	cmp	r3, #2
	beq	.L507
.L506:
.L505:
	add	sp, sp, #60
	@ sp needed
	pop	{r4, r5, r6, r7, pc}
.L507:
	adds	r0, r0, #208
	bl	ktime_get_ts64
	mov	r0, r4
	bl	mpi_obj_ref
	ldr	r3, [r4, #12]
	lsls	r3, r3, #19
	bpl	.L510
	ldr	r3, [r4, #44]
	ldr	r0, [r5]
	ldr	r1, [r4]
	ldr	r2, [r3, #44]
	ldr	r7, .L548
	ldr	r3, .L548+4
	strd	r2, r1, [sp, #4]
	movs	r1, #5
	cmp	r6, #0
	it	eq
	moveq	r3, r7
	ldr	r2, .L548+8
	strd	r0, r3, [sp, #12]
	mov	r3, #454
	movs	r0, #0
	str	r3, [sp]
	ldr	r3, .L548+12
	bl	vlog
	cmp	r6, #0
	bne	.L512
	ldr	r3, [r4, #284]
	cbnz	r3, .L513
	ldr	r3, [r4, #288]
	cmp	r3, #0
	beq	.L512
.L513:
	.syntax unified
@ 29 "./arch/arm/include/asm/irqflags.h" 1
		mrs	r6, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
	.thumb
	.syntax unified
	ldr	r0, [r4, #308]
	cbz	r0, .L514
	bl	mpi_obj_unref
.L514:
	cbz	r5, .L515
	mov	r0, r5
	bl	mpi_obj_ref
.L515:
	str	r5, [r4, #308]
	add	r0, r4, #316
	bl	complete_all
	.syntax unified
@ 171 "./arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, r6	@ local_irq_restore
@ 0 "" 2
	.thumb
	.syntax unified
	ldr	r3, [r4, #288]
	cbz	r3, .L512
	ldr	r3, [r4, #292]
	cbz	r3, .L510
	mov	r1, r5
	mov	r0, r4
	blx	r3
.L510:
	add	r0, sp, #24
	bl	ktime_get_ts64
	ldr	r1, [r4, #216]
	ldrd	r2, r3, [r4, #208]
	ldr	r0, [sp, #32]
	ldr	r5, [sp, #24]
	subs	r0, r0, r1
	subs	r2, r5, r2
	asr	r1, r0, #31
	strd	r0, [sp]
	ldr	r1, [sp, #28]
	add	r0, sp, #40
	sbc	r3, r1, r3
	bl	set_normalized_timespec64
	ldr	r0, .L548+16
	ldr	r3, [sp, #48]
	ldr	r2, [sp, #40]
	smull	r0, r1, r3, r0
	asrs	r3, r3, #31
	mov	r0, r4
	rsb	r3, r3, r1, asr #6
	ldr	r1, .L548+20
	mla	r3, r1, r2, r3
	str	r3, [r4, #240]
	bl	mpi_obj_unref
	b	.L505
.L512:
	ldr	r1, [r4, #116]
	ldr	r6, .L548+24
	cbz	r1, .L517
	ldr	r7, [r4, #96]
	mov	r0, r7
	bl	__aeabi_idivmod
	add	r1, r1, r4
	ldrb	r3, [r1, #120]	@ zero_extendqisi2
	cbnz	r3, .L518
.L517:
	mov	r1, r5
	mov	r0, r4
	bl	add_user_to_buf
	ldr	r3, [r4, #44]
	mov	r2, r5
	movs	r1, #1
	ldr	r3, [r3, #80]
	blx	r3
	ldr	r3, [r4, #96]
	ldr	r2, [r4, #100]
	adds	r3, r3, #1
	str	r3, [r4, #96]
	adds	r3, r2, #1
	str	r3, [r4, #100]
	cbz	r0, .L547
	ldr	r3, [r4, #104]
	adds	r3, r3, #1
	str	r3, [r4, #104]
.L547:
	ldr	r3, [r6]
	ldr	r1, [r4, #112]
	rsb	r3, r3, #300
	cmn	r3, r1
	itttt	mi
	ldrmi	r3, [r6]
	strdmi	r2, r3, [r4, #108]
	movmi	r3, #0
	strmi	r3, [r4, #100]
	b	.L510
.L518:
	ldr	r2, [r4, #100]
	adds	r7, r7, #1
	str	r7, [r4, #96]
	adds	r3, r2, #1
	str	r3, [r4, #100]
	b	.L547
.L549:
	.align	2
.L548:
	.word	.LC18
	.word	.LC27
	.word	.LC28
	.word	.LANCHOR0+476
	.word	274877907
	.word	1000000
	.word	jiffies
	.fnend
	.size	mpi_node_buffer_in, .-mpi_node_buffer_in
	.align	1
	.global	mpi_node_buffer_out
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpi_node_buffer_out, %function
mpi_node_buffer_out:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, lr}
	.save {r4, r5, r6, r7, lr}
	mov	r4, r0
	.pad #60
	sub	sp, sp, #60
	mov	r6, r1
	mov	r5, r2
	cbz	r0, .L551
	ldr	r3, [r0, #12]
	and	r3, r3, #6
	cmp	r3, #2
	beq	.L552
.L551:
.L550:
	add	sp, sp, #60
	@ sp needed
	pop	{r4, r5, r6, r7, pc}
.L552:
	adds	r0, r0, #224
	bl	ktime_get_ts64
	mov	r0, r4
	bl	mpi_obj_ref
	ldr	r3, [r4, #44]
	ldr	r1, [r4]
	ldr	r0, [r6]
	ldr	r2, [r3, #44]
	ldr	r7, .L585
	ldr	r3, .L585+4
	strd	r2, r1, [sp, #4]
	movs	r1, #5
	cmp	r5, #0
	it	eq
	moveq	r3, r7
	ldr	r2, .L585+8
	strd	r0, r3, [sp, #12]
	mov	r3, #500
	movs	r0, #0
	str	r3, [sp]
	ldr	r3, .L585+12
	bl	vlog
	cmp	r5, #0
	bne	.L555
	ldr	r3, [r4, #296]
	cbnz	r3, .L556
	ldr	r3, [r4, #300]
	cmp	r3, #0
	beq	.L555
.L556:
	.syntax unified
@ 29 "./arch/arm/include/asm/irqflags.h" 1
		mrs	r5, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
	.thumb
	.syntax unified
	ldr	r0, [r4, #312]
	cbz	r0, .L557
	bl	mpi_obj_unref
.L557:
	cbz	r6, .L558
	mov	r0, r6
	bl	mpi_obj_ref
.L558:
	str	r6, [r4, #312]
	add	r0, r4, #328
	bl	complete_all
	.syntax unified
@ 171 "./arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, r5	@ local_irq_restore
@ 0 "" 2
	.thumb
	.syntax unified
	ldr	r3, [r4, #300]
	cbz	r3, .L555
	ldr	r3, [r4, #304]
	cbz	r3, .L560
	mov	r1, r6
	mov	r0, r4
	blx	r3
.L560:
	add	r0, sp, #24
	bl	ktime_get_ts64
	ldr	r1, [r4, #232]
	ldrd	r2, r3, [r4, #224]
	ldr	r0, [sp, #32]
	ldr	r5, [sp, #24]
	subs	r0, r0, r1
	subs	r2, r5, r2
	asr	r1, r0, #31
	strd	r0, [sp]
	ldr	r1, [sp, #28]
	add	r0, sp, #40
	sbc	r3, r1, r3
	bl	set_normalized_timespec64
	ldr	r0, .L585+16
	ldr	r3, [sp, #48]
	ldr	r2, [sp, #40]
	smull	r0, r1, r3, r0
	asrs	r3, r3, #31
	mov	r0, r4
	rsb	r3, r3, r1, asr #6
	ldr	r1, .L585+20
	mla	r3, r1, r2, r3
	str	r3, [r4, #244]
	bl	mpi_obj_unref
	b	.L550
.L555:
	cbz	r6, .L561
	ldr	r3, [r4, #76]
	cmp	r3, #0
	itttt	ge
	addge	r3, r3, #16
	movge	r2, #0
	addge	r3, r6, r3, lsl #2
	strge	r2, [r3, #4]
.L561:
	ldr	r1, .L585+24
	add	r7, r4, #260
	ldr	r2, [r4, #156]
	ldr	r3, [r4, #152]
	ldr	r0, [r4, #168]
	adds	r3, r3, #1
	str	r3, [r4, #152]
	adds	r3, r2, #1
	str	r3, [r4, #156]
	ldr	r3, [r1]
	rsb	r3, r3, #300
	cmn	r3, r0
	it	mi
	ldrmi	r3, [r1]
	ldr	r5, [r4, #260]
	sub	r5, r5, #4
	ittt	mi
	strdmi	r2, r3, [r4, #164]
	movmi	r3, #0
	strmi	r3, [r4, #156]
.L563:
	adds	r3, r5, #4
	cmp	r3, r7
	beq	.L560
	ldr	r0, [r5]
	movs	r2, #0
	mov	r1, r6
	bl	mpi_node_buffer_in
	ldr	r5, [r5, #4]
	subs	r5, r5, #4
	b	.L563
.L586:
	.align	2
.L585:
	.word	.LC18
	.word	.LC27
	.word	.LC29
	.word	.LANCHOR0+495
	.word	274877907
	.word	1000000
	.word	jiffies
	.fnend
	.size	mpi_node_buffer_out, .-mpi_node_buffer_out
	.align	1
	.global	mpi_node_buffer_available
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpi_node_buffer_available, %function
mpi_node_buffer_available:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	.save {r4, r5, r6, lr}
	.pad #16
	mov	r4, r0
	mov	r5, r1
	ldr	r6, [r0, #44]
	cbz	r0, .L588
	ldr	r3, [r0, #12]
	and	r3, r3, #6
	cmp	r3, #2
	beq	.L589
.L588:
	add	sp, sp, #16
	@ sp needed
	pop	{r4, r5, r6, pc}
.L589:
	bl	mpi_obj_ref
	ldr	r3, [r4, #12]
	lsls	r3, r3, #19
	bpl	.L592
	ldr	r3, [r4]
	movs	r1, #5
	ldr	r2, .L601
	movs	r0, #0
	str	r3, [sp, #12]
	ldr	r3, [r4, #44]
	ldr	r3, [r3, #44]
	str	r3, [sp, #8]
	ldr	r3, [r5]
	str	r3, [sp, #4]
	mov	r3, #428
	str	r3, [sp]
	ldr	r3, .L601+4
	bl	vlog
	ldr	r3, [r6, #80]
	cbz	r3, .L592
	mov	r2, r5
	movs	r1, #0
	mov	r0, r4
	blx	r3
.L592:
	mov	r0, r4
	add	sp, sp, #16
	@ sp needed
	pop	{r4, r5, r6, lr}
	b	mpi_obj_unref
.L602:
	.align	2
.L601:
	.word	.LC30
	.word	.LANCHOR0+515
	.fnend
	.size	mpi_node_buffer_available, .-mpi_node_buffer_available
	.section	.rodata
	.set	.LANCHOR0,. + 0
	.type	__func__.36464, %object
	.size	__func__.36464, 18
__func__.36464:
	.ascii	"mpi_node_streamon\000"
	.type	__func__.36479, %object
	.size	__func__.36479, 19
__func__.36479:
	.ascii	"mpi_node_streamoff\000"
	.type	__func__.36677, %object
	.size	__func__.36677, 21
__func__.36677:
	.ascii	"mpi_node_request_buf\000"
	.type	__func__.36696, %object
	.size	__func__.36696, 15
__func__.36696:
	.ascii	"mpi_node_flush\000"
	.type	__func__.36724, %object
	.size	__func__.36724, 16
__func__.36724:
	.ascii	"mpi_node_unbind\000"
	.type	__func__.36750, %object
	.size	__func__.36750, 14
__func__.36750:
	.ascii	"mpi_node_bind\000"
	.type	__func__.36990, %object
	.size	__func__.36990, 17
__func__.36990:
	.ascii	"mpi_dev_register\000"
	.type	__func__.36253, %object
	.size	__func__.36253, 24
__func__.36253:
	.ascii	"mpi_node_add_in_watcher\000"
	.type	__func__.36260, %object
	.size	__func__.36260, 23
__func__.36260:
	.ascii	"mpi_node_add_in_filter\000"
	.type	__func__.36267, %object
	.size	__func__.36267, 25
__func__.36267:
	.ascii	"mpi_node_add_out_watcher\000"
	.type	__func__.36274, %object
	.size	__func__.36274, 24
__func__.36274:
	.ascii	"mpi_node_add_out_filter\000"
	.type	__func__.36281, %object
	.size	__func__.36281, 24
__func__.36281:
	.ascii	"mpi_node_del_in_watcher\000"
	.type	__func__.36290, %object
	.size	__func__.36290, 23
__func__.36290:
	.ascii	"mpi_node_del_in_filter\000"
	.type	__func__.36299, %object
	.size	__func__.36299, 25
__func__.36299:
	.ascii	"mpi_node_del_out_watcher\000"
	.type	__func__.36308, %object
	.size	__func__.36308, 24
__func__.36308:
	.ascii	"mpi_node_del_out_filter\000"
	.type	__func__.36633, %object
	.size	__func__.36633, 23
__func__.36633:
	.ascii	"mpi_node_get_in_buffer\000"
	.type	__func__.36663, %object
	.size	__func__.36663, 24
__func__.36663:
	.ascii	"mpi_node_get_out_buffer\000"
	.type	__func__.36852, %object
	.size	__func__.36852, 20
__func__.36852:
	.ascii	"mpi_dev_request_job\000"
	.type	__func__.36866, %object
	.size	__func__.36866, 29
__func__.36866:
	.ascii	"mpi_dev_request_job_for_node\000"
	.type	__func__.36778, %object
	.size	__func__.36778, 17
__func__.36778:
	.ascii	"mpi_node_destroy\000"
	.type	__func__.36839, %object
	.size	__func__.36839, 32
__func__.36839:
	.ascii	"mpi_dev_create_node_with_params\000"
	.type	__func__.36951, %object
	.size	__func__.36951, 19
__func__.36951:
	.ascii	"mpi_dev_unregister\000"
	.type	__func__.36525, %object
	.size	__func__.36525, 19
__func__.36525:
	.ascii	"mpi_node_buffer_in\000"
	.type	__func__.36552, %object
	.size	__func__.36552, 20
__func__.36552:
	.ascii	"mpi_node_buffer_out\000"
	.type	__func__.36512, %object
	.size	__func__.36512, 26
__func__.36512:
	.ascii	"mpi_node_buffer_available\000"
	.data
	.align	2
	.type	___modver_attr, %object
	.size	___modver_attr, 36
___modver_attr:
	.word	.LC31
	.short	292
	.space	2
	.word	__modver_version_show
	.space	16
	.word	.LC32
	.word	.LC33
	.bss
	.set	.LANCHOR1,. + 0
	.type	__key.10560, %object
	.size	__key.10560, 0
__key.10560:
	.section	.modinfo,"a"
	.type	__UNIQUE_ID_version249, %object
	.size	__UNIQUE_ID_version249, 19
__UNIQUE_ID_version249:
	.ascii	"rockit.version=0.1\000"
	.type	__UNIQUE_ID_license248, %object
	.size	__UNIQUE_ID_license248, 19
__UNIQUE_ID_license248:
	.ascii	"rockit.license=GPL\000"
	.type	__UNIQUE_ID_file247, %object
	.size	__UNIQUE_ID_file247, 37
__UNIQUE_ID_file247:
	.ascii	"rockit.file=drivers/rockit-ko/rockit\000"
	.type	__UNIQUE_ID_author246, %object
	.size	__UNIQUE_ID_author246, 23
__UNIQUE_ID_author246:
	.ascii	"rockit.author=Rockchip\000"
	.section	.rodata.str1.1,"aMS",%progbits,1
.LC0:
	.ascii	"%s,%d:node(%s-%d) stream on\000"
.LC1:
	.ascii	"%s,%d:node(%s-%d) stream off\000"
.LC2:
	.ascii	"%s,%d:node(%s-%d) request buf(%d)\000"
.LC3:
	.ascii	"%s,%d:node(%s-%d) got buf(%d) from pool(%d)\000"
.LC4:
	.ascii	"%s,%d:node(%s-%d) flushing\000"
.LC5:
	.ascii	"%s,%d:unbinding source(%s-%d) sink(%s-%d)\000"
.LC6:
	.ascii	"%s,%d:bind source(%s-%d) sink(%s-%d)\000"
.LC7:
	.ascii	"&x->wait\000"
.LC8:
	.ascii	"%s,%d:device(%s) registered\000"
.LC9:
	.ascii	"%s,%d:node(%s-%d) add in watcher(%s)\000"
.LC10:
	.ascii	"%s,%d:node(%s-%d) add in filter(%s)\000"
.LC11:
	.ascii	"%s,%d:node(%s-%d) add out watcher(%s)\000"
.LC12:
	.ascii	"%s,%d:node(%s-%d) add out filter(%s)\000"
.LC13:
	.ascii	"%s,%d:node(%s-%d) del in watcher(%s)\000"
.LC14:
	.ascii	"%s,%d:node(%s-%d) del in filter(%s)\000"
.LC15:
	.ascii	"%s,%d:node(%s-%d) del out watcher(%s)\000"
.LC16:
	.ascii	"%s,%d:node(%s-%d) del out filter(%s)\000"
.LC17:
	.ascii	" next\000"
.LC18:
	.ascii	"\000"
.LC19:
	.ascii	"%s,%d:node(%s-%d) got%s input buf(%d)\000"
.LC20:
	.ascii	"pick-watcher\000"
.LC21:
	.ascii	"%s,%d:node(%s-%d) got%s output buf(%d)\000"
.LC22:
	.ascii	"%s,%d:device(%s) request job\000"
.LC23:
	.ascii	"%s,%d:device(%s) request job for node %d\000"
.LC24:
	.ascii	"%s,%d:node(%s-%d) destroying\000"
.LC25:
	.ascii	"%s,%d:node(%s-%d) created\000"
.LC26:
	.ascii	"%s,%d:device(%s) unregistering\000"
.LC27:
	.ascii	" injected\000"
.LC28:
	.ascii	"%s,%d:node(%s-%d) input buf(%d)%s\000"
.LC29:
	.ascii	"%s,%d:node(%s-%d) output buf(%d)%s\000"
.LC30:
	.ascii	"%s,%d:buf(%d) available for node(%s-%d)\000"
.LC31:
	.ascii	"version\000"
.LC32:
	.ascii	"rockit\000"
.LC33:
	.ascii	"0.1\000"
	.section	___ksymtab_gpl+mpi_dev_create_node_with_params,"a"
	.align	2
	.type	__ksymtab_mpi_dev_create_node_with_params, %object
	.size	__ksymtab_mpi_dev_create_node_with_params, 12
__ksymtab_mpi_dev_create_node_with_params:
	.word	mpi_dev_create_node_with_params
	.word	__kstrtab_mpi_dev_create_node_with_params
	.word	__kstrtabns_mpi_dev_create_node_with_params
	.section	___ksymtab_gpl+mpi_dev_register,"a"
	.align	2
	.type	__ksymtab_mpi_dev_register, %object
	.size	__ksymtab_mpi_dev_register, 12
__ksymtab_mpi_dev_register:
	.word	mpi_dev_register
	.word	__kstrtab_mpi_dev_register
	.word	__kstrtabns_mpi_dev_register
	.section	___ksymtab_gpl+mpi_dev_request_job,"a"
	.align	2
	.type	__ksymtab_mpi_dev_request_job, %object
	.size	__ksymtab_mpi_dev_request_job, 12
__ksymtab_mpi_dev_request_job:
	.word	mpi_dev_request_job
	.word	__kstrtab_mpi_dev_request_job
	.word	__kstrtabns_mpi_dev_request_job
	.section	___ksymtab_gpl+mpi_dev_request_job_for_node,"a"
	.align	2
	.type	__ksymtab_mpi_dev_request_job_for_node, %object
	.size	__ksymtab_mpi_dev_request_job_for_node, 12
__ksymtab_mpi_dev_request_job_for_node:
	.word	mpi_dev_request_job_for_node
	.word	__kstrtab_mpi_dev_request_job_for_node
	.word	__kstrtabns_mpi_dev_request_job_for_node
	.section	___ksymtab_gpl+mpi_dev_run_job,"a"
	.align	2
	.type	__ksymtab_mpi_dev_run_job, %object
	.size	__ksymtab_mpi_dev_run_job, 12
__ksymtab_mpi_dev_run_job:
	.word	mpi_dev_run_job
	.word	__kstrtab_mpi_dev_run_job
	.word	__kstrtabns_mpi_dev_run_job
	.section	___ksymtab_gpl+mpi_dev_unregister,"a"
	.align	2
	.type	__ksymtab_mpi_dev_unregister, %object
	.size	__ksymtab_mpi_dev_unregister, 12
__ksymtab_mpi_dev_unregister:
	.word	mpi_dev_unregister
	.word	__kstrtab_mpi_dev_unregister
	.word	__kstrtabns_mpi_dev_unregister
	.section	___ksymtab_gpl+mpi_node_add_in_filter,"a"
	.align	2
	.type	__ksymtab_mpi_node_add_in_filter, %object
	.size	__ksymtab_mpi_node_add_in_filter, 12
__ksymtab_mpi_node_add_in_filter:
	.word	mpi_node_add_in_filter
	.word	__kstrtab_mpi_node_add_in_filter
	.word	__kstrtabns_mpi_node_add_in_filter
	.section	___ksymtab_gpl+mpi_node_add_in_watcher,"a"
	.align	2
	.type	__ksymtab_mpi_node_add_in_watcher, %object
	.size	__ksymtab_mpi_node_add_in_watcher, 12
__ksymtab_mpi_node_add_in_watcher:
	.word	mpi_node_add_in_watcher
	.word	__kstrtab_mpi_node_add_in_watcher
	.word	__kstrtabns_mpi_node_add_in_watcher
	.section	___ksymtab_gpl+mpi_node_add_out_filter,"a"
	.align	2
	.type	__ksymtab_mpi_node_add_out_filter, %object
	.size	__ksymtab_mpi_node_add_out_filter, 12
__ksymtab_mpi_node_add_out_filter:
	.word	mpi_node_add_out_filter
	.word	__kstrtab_mpi_node_add_out_filter
	.word	__kstrtabns_mpi_node_add_out_filter
	.section	___ksymtab_gpl+mpi_node_add_out_watcher,"a"
	.align	2
	.type	__ksymtab_mpi_node_add_out_watcher, %object
	.size	__ksymtab_mpi_node_add_out_watcher, 12
__ksymtab_mpi_node_add_out_watcher:
	.word	mpi_node_add_out_watcher
	.word	__kstrtab_mpi_node_add_out_watcher
	.word	__kstrtabns_mpi_node_add_out_watcher
	.section	___ksymtab_gpl+mpi_node_bind,"a"
	.align	2
	.type	__ksymtab_mpi_node_bind, %object
	.size	__ksymtab_mpi_node_bind, 12
__ksymtab_mpi_node_bind:
	.word	mpi_node_bind
	.word	__kstrtab_mpi_node_bind
	.word	__kstrtabns_mpi_node_bind
	.section	___ksymtab_gpl+mpi_node_buffer_in,"a"
	.align	2
	.type	__ksymtab_mpi_node_buffer_in, %object
	.size	__ksymtab_mpi_node_buffer_in, 12
__ksymtab_mpi_node_buffer_in:
	.word	mpi_node_buffer_in
	.word	__kstrtab_mpi_node_buffer_in
	.word	__kstrtabns_mpi_node_buffer_in
	.section	___ksymtab_gpl+mpi_node_buffer_out,"a"
	.align	2
	.type	__ksymtab_mpi_node_buffer_out, %object
	.size	__ksymtab_mpi_node_buffer_out, 12
__ksymtab_mpi_node_buffer_out:
	.word	mpi_node_buffer_out
	.word	__kstrtab_mpi_node_buffer_out
	.word	__kstrtabns_mpi_node_buffer_out
	.section	___ksymtab_gpl+mpi_node_del_in_filter,"a"
	.align	2
	.type	__ksymtab_mpi_node_del_in_filter, %object
	.size	__ksymtab_mpi_node_del_in_filter, 12
__ksymtab_mpi_node_del_in_filter:
	.word	mpi_node_del_in_filter
	.word	__kstrtab_mpi_node_del_in_filter
	.word	__kstrtabns_mpi_node_del_in_filter
	.section	___ksymtab_gpl+mpi_node_del_in_watcher,"a"
	.align	2
	.type	__ksymtab_mpi_node_del_in_watcher, %object
	.size	__ksymtab_mpi_node_del_in_watcher, 12
__ksymtab_mpi_node_del_in_watcher:
	.word	mpi_node_del_in_watcher
	.word	__kstrtab_mpi_node_del_in_watcher
	.word	__kstrtabns_mpi_node_del_in_watcher
	.section	___ksymtab_gpl+mpi_node_del_out_filter,"a"
	.align	2
	.type	__ksymtab_mpi_node_del_out_filter, %object
	.size	__ksymtab_mpi_node_del_out_filter, 12
__ksymtab_mpi_node_del_out_filter:
	.word	mpi_node_del_out_filter
	.word	__kstrtab_mpi_node_del_out_filter
	.word	__kstrtabns_mpi_node_del_out_filter
	.section	___ksymtab_gpl+mpi_node_del_out_watcher,"a"
	.align	2
	.type	__ksymtab_mpi_node_del_out_watcher, %object
	.size	__ksymtab_mpi_node_del_out_watcher, 12
__ksymtab_mpi_node_del_out_watcher:
	.word	mpi_node_del_out_watcher
	.word	__kstrtab_mpi_node_del_out_watcher
	.word	__kstrtabns_mpi_node_del_out_watcher
	.section	___ksymtab_gpl+mpi_node_destroy,"a"
	.align	2
	.type	__ksymtab_mpi_node_destroy, %object
	.size	__ksymtab_mpi_node_destroy, 12
__ksymtab_mpi_node_destroy:
	.word	mpi_node_destroy
	.word	__kstrtab_mpi_node_destroy
	.word	__kstrtabns_mpi_node_destroy
	.section	___ksymtab_gpl+mpi_node_enable_auto_streamon,"a"
	.align	2
	.type	__ksymtab_mpi_node_enable_auto_streamon, %object
	.size	__ksymtab_mpi_node_enable_auto_streamon, 12
__ksymtab_mpi_node_enable_auto_streamon:
	.word	mpi_node_enable_auto_streamon
	.word	__kstrtab_mpi_node_enable_auto_streamon
	.word	__kstrtabns_mpi_node_enable_auto_streamon
	.section	___ksymtab_gpl+mpi_node_flush,"a"
	.align	2
	.type	__ksymtab_mpi_node_flush, %object
	.size	__ksymtab_mpi_node_flush, 12
__ksymtab_mpi_node_flush:
	.word	mpi_node_flush
	.word	__kstrtab_mpi_node_flush
	.word	__kstrtabns_mpi_node_flush
	.section	___ksymtab_gpl+mpi_node_get_in_buffer,"a"
	.align	2
	.type	__ksymtab_mpi_node_get_in_buffer, %object
	.size	__ksymtab_mpi_node_get_in_buffer, 12
__ksymtab_mpi_node_get_in_buffer:
	.word	mpi_node_get_in_buffer
	.word	__kstrtab_mpi_node_get_in_buffer
	.word	__kstrtabns_mpi_node_get_in_buffer
	.section	___ksymtab_gpl+mpi_node_get_out_buffer,"a"
	.align	2
	.type	__ksymtab_mpi_node_get_out_buffer, %object
	.size	__ksymtab_mpi_node_get_out_buffer, 12
__ksymtab_mpi_node_get_out_buffer:
	.word	mpi_node_get_out_buffer
	.word	__kstrtab_mpi_node_get_out_buffer
	.word	__kstrtabns_mpi_node_get_out_buffer
	.section	___ksymtab_gpl+mpi_node_pick_in_buffer,"a"
	.align	2
	.type	__ksymtab_mpi_node_pick_in_buffer, %object
	.size	__ksymtab_mpi_node_pick_in_buffer, 12
__ksymtab_mpi_node_pick_in_buffer:
	.word	mpi_node_pick_in_buffer
	.word	__kstrtab_mpi_node_pick_in_buffer
	.word	__kstrtabns_mpi_node_pick_in_buffer
	.section	___ksymtab_gpl+mpi_node_pick_out_buffer,"a"
	.align	2
	.type	__ksymtab_mpi_node_pick_out_buffer, %object
	.size	__ksymtab_mpi_node_pick_out_buffer, 12
__ksymtab_mpi_node_pick_out_buffer:
	.word	mpi_node_pick_out_buffer
	.word	__kstrtab_mpi_node_pick_out_buffer
	.word	__kstrtabns_mpi_node_pick_out_buffer
	.section	___ksymtab_gpl+mpi_node_release_buffer,"a"
	.align	2
	.type	__ksymtab_mpi_node_release_buffer, %object
	.size	__ksymtab_mpi_node_release_buffer, 12
__ksymtab_mpi_node_release_buffer:
	.word	mpi_node_release_buffer
	.word	__kstrtab_mpi_node_release_buffer
	.word	__kstrtabns_mpi_node_release_buffer
	.section	___ksymtab_gpl+mpi_node_request_buf,"a"
	.align	2
	.type	__ksymtab_mpi_node_request_buf, %object
	.size	__ksymtab_mpi_node_request_buf, 12
__ksymtab_mpi_node_request_buf:
	.word	mpi_node_request_buf
	.word	__kstrtab_mpi_node_request_buf
	.word	__kstrtabns_mpi_node_request_buf
	.section	___ksymtab_gpl+mpi_node_set_in_frame_rate,"a"
	.align	2
	.type	__ksymtab_mpi_node_set_in_frame_rate, %object
	.size	__ksymtab_mpi_node_set_in_frame_rate, 12
__ksymtab_mpi_node_set_in_frame_rate:
	.word	mpi_node_set_in_frame_rate
	.word	__kstrtab_mpi_node_set_in_frame_rate
	.word	__kstrtabns_mpi_node_set_in_frame_rate
	.section	___ksymtab_gpl+mpi_node_set_out_frame_rate,"a"
	.align	2
	.type	__ksymtab_mpi_node_set_out_frame_rate, %object
	.size	__ksymtab_mpi_node_set_out_frame_rate, 12
__ksymtab_mpi_node_set_out_frame_rate:
	.word	mpi_node_set_out_frame_rate
	.word	__kstrtab_mpi_node_set_out_frame_rate
	.word	__kstrtabns_mpi_node_set_out_frame_rate
	.section	___ksymtab_gpl+mpi_node_set_params,"a"
	.align	2
	.type	__ksymtab_mpi_node_set_params, %object
	.size	__ksymtab_mpi_node_set_params, 12
__ksymtab_mpi_node_set_params:
	.word	mpi_node_set_params
	.word	__kstrtab_mpi_node_set_params
	.word	__kstrtabns_mpi_node_set_params
	.section	___ksymtab_gpl+mpi_node_stream_pause,"a"
	.align	2
	.type	__ksymtab_mpi_node_stream_pause, %object
	.size	__ksymtab_mpi_node_stream_pause, 12
__ksymtab_mpi_node_stream_pause:
	.word	mpi_node_stream_pause
	.word	__kstrtab_mpi_node_stream_pause
	.word	__kstrtabns_mpi_node_stream_pause
	.section	___ksymtab_gpl+mpi_node_streamoff,"a"
	.align	2
	.type	__ksymtab_mpi_node_streamoff, %object
	.size	__ksymtab_mpi_node_streamoff, 12
__ksymtab_mpi_node_streamoff:
	.word	mpi_node_streamoff
	.word	__kstrtab_mpi_node_streamoff
	.word	__kstrtabns_mpi_node_streamoff
	.section	___ksymtab_gpl+mpi_node_streamon,"a"
	.align	2
	.type	__ksymtab_mpi_node_streamon, %object
	.size	__ksymtab_mpi_node_streamon, 12
__ksymtab_mpi_node_streamon:
	.word	mpi_node_streamon
	.word	__kstrtab_mpi_node_streamon
	.word	__kstrtabns_mpi_node_streamon
	.section	___ksymtab_gpl+mpi_node_unbind,"a"
	.align	2
	.type	__ksymtab_mpi_node_unbind, %object
	.size	__ksymtab_mpi_node_unbind, 12
__ksymtab_mpi_node_unbind:
	.word	mpi_node_unbind
	.word	__kstrtab_mpi_node_unbind
	.word	__kstrtabns_mpi_node_unbind
	.section	__modver,"a"
	.align	2
	.type	__modver_attr, %object
	.size	__modver_attr, 4
__modver_attr:
	.word	___modver_attr
	.ident	"GCC: (crosstool-NG 1.24.0) 8.3.0"
	.section	.note.GNU-stack,"",%progbits
